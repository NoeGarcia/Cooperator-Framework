/*-
*       Copyright (c) 2006-2007 Eugenio Serrano, Daniel Calvin.
*       All rights reserved.
*
*       Redistribution and use in source and binary forms, with or without
*       modification, are permitted provided that the following conditions
*       are met:
*       1. Redistributions of source code must retain the above copyright
*          notice, this list of conditions and the following disclaimer.
*       2. Redistributions in binary form must reproduce the above copyright
*          notice, this list of conditions and the following disclaimer in the
*          documentation and/or other materials provided with the distribution.
*       3. Neither the name of copyright holders nor the names of its
*          contributors may be used to endorse or promote products derived
*          from this software without specific prior written permission.
*
*       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
*       TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
*       PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS
*       BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*       CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
*       SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
*       INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*       CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*       ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*       POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace Cooperator.Framework.Utility.DBReverseHelper
{
    /// <summary>
    /// Enum que representa el orden que puede tener un campo que forme parte de la clave de la tabla.
    /// </summary>
    public enum OrderEnum {

        /// <summary>
        /// Orden Ascendente
        /// </summary>
        Asc = 0, 

        /// <summary>
        /// Orden Descendente
        /// </summary>
        Desc = 1, 

        /// <summary>
        /// Orden desconocido
        /// </summary>
        Unknown = 2 
    }

    /// <summary>
    /// Clase base que representa un objeto de la base de datos. De aqui heredan, table, field, etc..
    /// </summary>
    public abstract class DBObject
    {
        private string name;

        /// <summary>
        /// Contructor de la clase
        /// </summary>
        public DBObject()
        {
        }
        /// <summary>
        /// Contructor de la clase
        /// </summary>
        /// <param name="name">El nombre del objeto</param>
        public DBObject(string name)
        {
            this.Name = name;
        }

        /// <summary>
        /// Nombre del objeto.
        /// </summary>
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

    }


    /// <summary>
    /// Representa un campo de una tabla de una base de datos.
    /// </summary>
    public class DBField : DBObject
    {

        private Type universalType;
        private string nativeType;
        private Nullable<int> length = null;
        private Nullable<int> precision = null;
        private Nullable<int> scale = null;
        private Boolean nullable;
        private Boolean identity;
        private Boolean rowVersion;
        private Boolean autoGenerated;
        private Boolean rowGuid;
        private Boolean computed;

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        public DBField() : base() {
        }

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        /// <param name="name">Nombre del campo</param>
        public DBField(string name) : base(name) {
        }

        /// <summary>
        /// Contructor de la clase
        /// </summary>
        /// <param name="name">Nombre del campo</param>
        /// <param name="universalType">Tipo del campo (universal)</param>
        /// <param name="nativeType">Tipo del campo (nativo)</param>
        /// <param name="length">Longitud del campo</param>
        /// <param name="precision"></param>
        /// <param name="scale"></param>
        /// <param name="nullable">Si el campo acepta nulos</param>
        /// <param name="rowVersion"></param>
        /// <param name="autoGenerated"></param>
        /// <param name="identity"></param>
        /// <param name="rowGuid"></param>
        /// <param name="computed"></param>
        public DBField(
            string name,
            Type universalType,
            string nativeType,
            Nullable<int> length,
            Nullable<int> precision,
            Nullable<int> scale, 
            Boolean nullable, 
            Boolean rowVersion,
            Boolean autoGenerated,
            Boolean identity,
            Boolean rowGuid,
            Boolean computed
            )
            : base(name)
        {
            this.UniversalType = universalType;
            this.NativeType = nativeType;
            this.Nullable = nullable;
            this.RowVersion = rowVersion;
            this.Length = length;
            this.Precision = precision;
            this.Scale = scale;
            this.AutoGenerated = autoGenerated;
            this.Identity = identity;
            this.RowGuid = rowGuid;
            this.Computed = computed;
        }


        /// <summary>
        /// Tipo del campo (universal)
        /// </summary>
        public Type UniversalType
        {
            get { return universalType; }
            set { universalType = value; }
        }

        /// <summary>
        /// Tipo del campo (nativo)
        /// </summary>
        public string NativeType
        {
            get { return nativeType; }
            set { nativeType = value; }
        }

        /// <summary>
        /// Longitud del campo
        /// </summary>
        public Nullable<int> Length
        {
            get { return length; }
            set { length = value; }
        }

        /// <summary>
        /// Longitud del campo
        /// </summary>
        public Nullable<int> Precision
        {
            get { return precision; }
            set { precision = value; }
        }

        /// <summary>
        /// Longitud del campo
        /// </summary>
        public Nullable<int> Scale
        {
            get { return scale; }
            set { scale = value; }
        }

        /// <summary>
        /// Si el campo acepta valores nulos
        /// </summary>
        public Boolean Nullable
        {
            get { return nullable; }
            set { nullable = value; }
        }

        /// <summary>
        /// Si el campo es Identity
        /// </summary>
        public Boolean Identity
        {
            get { return identity; }
            set { identity = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public Boolean RowVersion
        {
            get { return rowVersion; }
            set { rowVersion = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public Boolean AutoGenerated
        {
            get { return autoGenerated; }
            set { autoGenerated = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public Boolean RowGuid
        {
            get { return rowGuid; }
            set { rowGuid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public Boolean Computed
        {
            get { return computed; }
            set { computed = value; }
        }
    
    }


    /// <summary>
    /// Representa un campo que forma parte de una clave de una tabla. 
    /// </summary>
    public class DBFieldKey : DBObject
    {
        private OrderEnum order;

        /// <summary>
        /// Constructor de la clase.
        /// </summary>
        public DBFieldKey()
            : base()
        {
        }

        /// <summary>
        /// Constructor de la clase.
        /// </summary>
        /// <param name="name">Nombre del campo</param>
        /// <param name="order">Orden del campo</param>
        public DBFieldKey(string name, OrderEnum order)
            : base(name)
        {
            this.order = order;
        }

        /// <summary>
        /// Orden del campo.
        /// </summary>
        public OrderEnum Order
        {
            get { return order; }
            set { order = value; }
        }
    }

    /// <summary>
    /// Representa un campo que forma parte de una clave foranea (Foreign Key) de una tabla. 
    /// </summary>
    public class DBFieldFKey : DBFieldKey
    {
        private string relatedFieldName;

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        public DBFieldFKey()
            : base()
        {
        }

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        /// <param name="name">Nombre del campo</param>
        /// <param name="order">Orden del campo</param>
        public DBFieldFKey(string name, OrderEnum order)
            : base(name, order)
        {
        }

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        /// <param name="name">Nombre del campo</param>
        /// <param name="order">Orden del campo</param>
        /// <param name="relatedFieldName">Nombre del campo relacionado</param>
        public DBFieldFKey(string name, OrderEnum order, string relatedFieldName)
            : base(name, order)
        {
            this.relatedFieldName = relatedFieldName;
        }


        /// <summary>
        /// Nombre del campo relacionado
        /// </summary>
        public string RelatedFieldName
        {
            get { return relatedFieldName; }
            set { relatedFieldName = value; }
        }
    }


    /// <summary>
    /// Representa una clave de la base de datos.
    /// </summary>
    /// <typeparam name="T">Tipo generico que representa el tipo de campos que componen la clave</typeparam>
    public class DBKey<T> : DBObject
    {
        private List<T> fields = new List<T>();

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        public DBKey()
            : base()
        {
        }

        /// <summary>
        /// Contructor de la clase.
        /// </summary>
        /// <param name="name">Nombre de la clave</param>
        public DBKey(string name)
            : base(name)
        {
        }

        /// <summary>
        /// Colecion de campos que conforman la clave.
        /// </summary>
        public List<T> Fields
        {
            get { return fields; }
        }


    }

    /// <summary>
    /// Representa una clave primaria (Primary Key()
    /// </summary>
    public class DBPrimaryKey : DBKey<DBFieldKey>
    {
        /// <summary>
        /// Constructor de la clase
        /// </summary>
        public DBPrimaryKey() : base() { 
        }

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        /// <param name="name">Nombre de la clave</param>
        public DBPrimaryKey(string name)
            : base(name) { 
        }


    }

    /// <summary>
    /// Representa una clave Foranea (Foreign Key)
    /// </summary>
    public class DBForeignKey : DBKey<DBFieldFKey>
    {
        private string relatedTableName;

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        public DBForeignKey() : base() { 
        }

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        /// <param name="name">Nombre de la clave foranea</param>
        public DBForeignKey(string name)
            : base(name) { 
        }

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        /// <param name="name">Nombre de la clave foranea</param>
        /// <param name="relatedTable">Nombre de la tabla relacionada</param>
        public DBForeignKey(string name, string relatedTable)
            : base(name)
        {
            this.relatedTableName = relatedTable;
        }

        /// <summary>
        /// Nombre de la tabla relacionada
        /// </summary>
        public string RelatedTableName
        {
            get { return relatedTableName; }
            set { relatedTableName = value; }
        }

        /// <summary>
        /// Nombre de la tabla relacionada
        /// </summary>
        public string RelatedTableNameWithoutSchema
        {
            get {
                if (relatedTableName.IndexOf('.') == -1)
                    return relatedTableName;
                else
                    return relatedTableName.Substring(relatedTableName.IndexOf('.') + 1);
            }
        }


        // where PK Fields.Count not equal FK Fields.Count
        // And all FK Fields included in PK
        Boolean isParentKey = false;

        /// <summary>
        /// Cuando PK.Count no es igual a FKFields.Count y todos los campos del FK estan incluidos en la PK
        /// </summary>
        public Boolean IsParentKey
        {
            get { return isParentKey; }
            set { isParentKey = value; }

        }

        // All FK Fields not included in PK
        Boolean isReferenceKey = false;

        /// <summary>
        /// Cuando todos los campos de FK no estan incluidos en la PK
        /// </summary>
        public Boolean IsReferenceKey
        {
            get { return isReferenceKey; }
            set { isReferenceKey = value; }
        }

        // where PK Fields.Count equal FK Fields.Count
        // And all FK Fields included in PK
        Boolean isOneToOneKey = false;

        /// <summary>
        /// Cuando PKFields.Count es igual a FKFields.Count y todos los campos de la FK estan incluidos en la PK
        /// </summary>
        public Boolean IsOneToOneKey
        {
            get { return isOneToOneKey; }
            set { isOneToOneKey = value; }
        }

    }


    /// <summary>
    /// Representa una tabla.
    /// </summary>
    public class DBTable : DBObject
    {
        private List<DBField> fields = new List<DBField>();
        private DBPrimaryKey primaryKey;
        private List<DBKey<DBFieldKey>> indexes = new List<DBKey<DBFieldKey>>();
        private List<DBForeignKey> foreignKeys = new List<DBForeignKey>();
        private string parent = "";
        private int parentLevel = 0;
        private DBForeignKey parentForeignKey = null;

        /// <summary>
        /// Constructor de la clase.
        /// </summary>
        public DBTable()
            : base() { 
        }

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        /// <param name="name">Nombre de la tabla</param>
        public DBTable(string name)
            : base(name) { }

        /// <summary>
        /// Campos de la tabla
        /// </summary>
        public List<DBField> Fields
        {
            get { return fields; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fieldName"></param>
        /// <returns></returns>
        public DBField GetField(string fieldName)
        {
            foreach (DBField dbf in fields)
            {
                if (fieldName.ToLower() == dbf.Name.ToLower()) return dbf;
            
            }
            return null;
        
        }

        /// <summary>
        /// Clave primaria de la tabla
        /// </summary>
        public DBPrimaryKey PrimaryKey
        {
            get { return primaryKey; }
            set { primaryKey = value; }
        }

        /// <summary>
        /// Coleccion de claves foraneas logicas (LogicalForeign Key) de la tabla.
        /// </summary>
        public List<DBForeignKey> ForeignKeys
        {
            get { return foreignKeys; }
        }


        /// <summary>
        /// Colecion de indices de la tabla
        /// </summary>
        public List<DBKey<DBFieldKey>> Indexes
        {
            get { return indexes; }
        }

        /// <summary>
        /// Nombre de la tabla padre
        /// </summary>
        public string Parent
        {
            get { return parent; }
            set { parent = value; }
        }

        /// <summary>
        /// Nivel de parentezco
        /// </summary>
        public int ParentLevel
        {
            get { return parentLevel; }
            set { parentLevel = value; }
        }

        /// <summary>
        /// Clave foranea (Foreign Key) de la tabla padre
        /// </summary>
        public DBForeignKey ParentForeignKey
        {
            get { return parentForeignKey; }
            set { parentForeignKey = value; }
        }

        /// <summary>
        /// Nombre de la tabla relacionada
        /// </summary>
        public string NameWithoutSchema
        {
            get
            {
                if (base.Name.IndexOf('.') == -1)
                    return base.Name;
                else
                    return base.Name.Substring(base.Name.IndexOf('.') + 1);
            }
        }

    }

    /// <summary>
    /// Representa una base de datos.
    /// </summary>
    public class DataBase : DBObject
    {

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        public DataBase() : base() { 
        }

        /// <summary>
        /// Constructor de la clase
        /// </summary>
        /// <param name="name">Nombre de la base de datos</param>
        public DataBase(string name) : base(name) { 
        }

        /// <summary>
        /// Coleccion de tablas de la base de datos
        /// </summary>
        public List<DBTable> Tables = new List<DBTable>();

        /// <summary>
        /// Coleccion de vistas de la base de datos
        /// </summary>
        public List<DBTable> Views = new List<DBTable>();

    }

}
