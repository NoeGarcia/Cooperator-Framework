/*-
*       Copyright (c) 2006-2007 Eugenio Serrano, Daniel Calvin.
*       All rights reserved.
*
*       Redistribution and use in source and binary forms, with or without
*       modification, are permitted provided that the following conditions
*       are met:
*       1. Redistributions of source code must retain the above copyright
*          notice, this list of conditions and the following disclaimer.
*       2. Redistributions in binary form must reproduce the above copyright
*          notice, this list of conditions and the following disclaimer in the
*          documentation and/or other materials provided with the distribution.
*       3. Neither the name of copyright holders nor the names of its
*          contributors may be used to endorse or promote products derived
*          from this software without specific prior written permission.
*
*       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
*       TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
*       PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS
*       BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*       CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
*       SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
*       INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*       CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*       ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*       POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Cooperator.Framework.Utility.DBReverseHelper;
using Cooperator.Framework.Utility.CodeGeneratorHelper;

public abstract class SqlServerScriptor : DBBaseScriptor
{
    public SqlServerScriptor()
        : base()
    {
    }

    protected override string CORRECT_TABLENAME(string EntityName)
    {
        if (EntityName.Contains("."))
        {
            string tableName = EntityName.Substring(EntityName.IndexOf('.') + 1);
            string schemaName = EntityName.Substring(0, EntityName.IndexOf('.'));
            return string.Format("[{0}].[{1}]", schemaName, tableName);
        }
        else
        {
            return "[dbo].[" + EntityName+"]";
        }
    }


    /// <summary>
    /// Used by: DescriptionFunction.cs
    /// </summary>
    protected override string PK_AS_PARAMETERS_FROM_RELATED_FIELDS(List<RelatedField> pkCollection)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (RelatedField relField in pkCollection)
        {
            string type = "";
            if (relField.NativeLength == 0 || relField.NativeType.ToLower() == "ntext" || relField.NativeType.ToLower() == "text" || relField.NativeType.ToLower() == "timestamp")
                type = relField.NativeType;
            else
                if (relField.NativePrecision + relField.NativeScale != 0)
                    type = relField.NativeType + "(" + relField.NativePrecision + "," + relField.NativeScale + ")";
                else
                    type = relField.NativeType + "(" + relField.NativeLength + ")";
            sb.Append(sep + "@" + CORRECT_NAME(relField.RelatedName) + " " + type);
            sep = ",\r\n";
        }
        return sb.ToString();
    }


    /// <summary>
    /// Used by: DescriptionFunction.cs
    /// </summary>
    protected override string PK_AS_WHERE_FROM_RELATED_FIELDS(List<RelatedField> pkCollection)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (RelatedField relField in pkCollection)
        {
            sb.Append(sep + "[" + relField.RelatedName + "] = @" + CORRECT_NAME(relField.RelatedName));
            sep = " AND\r\n";
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by:  Insert.cs
    /// </summary>
    protected override string ALL_FIELDS_AS_PARAMETERS(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = @"";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            //if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)
            if (currentProperty.IsUsedByInsertAndUpdate())
            {
                if (currentProperty.NativeType != "None")
                {
                    if (currentProperty.RelatedFields.Count == 0)
                    {
                        string outparam = currentProperty.IsAutoGenerated ? " output" : "";
                        string type = "";
                        if (currentProperty.NativeLength == 0 || currentProperty.NativeType.ToLower() == "ntext" || currentProperty.NativeType.ToLower() == "text" || currentProperty.NativeType.ToLower() == "timestamp" || currentProperty.NativeType.ToLower() == "sysname" || currentProperty.NativeType.ToLower() == "xml")
                            type = currentProperty.NativeType;
                        else
                            if (currentProperty.NativeLength == -1)
                                type = currentProperty.NativeType + "(MAX)";
                            else
                                if (currentProperty.NativePrecision + currentProperty.NativeScale != 0)
                                    type = currentProperty.NativeType + "(" + currentProperty.NativePrecision + "," + currentProperty.NativeScale + ")";
                                else
                                    type = currentProperty.NativeType + "(" + currentProperty.NativeLength + ")";


                        sb.Append(sep + "@" + CORRECT_NAME(currentProperty.Name) + " " + type + outparam);
                    }
                    sep = ",\r\n";
                }
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by: Insert.cs
    /// </summary>
    protected override string ALL_FIELDS_SEPARATED_BY_COMMA(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = @"";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            //if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)
            if (currentProperty.IsUsedByInsertAndUpdate())
            {
                if (currentProperty.NativeType != "None" && !currentProperty.IsIdentity && !currentProperty.IsComputed)
                {
                    if (currentProperty.RelatedFields.Count == 0)
                    {
                        sb.Append(sep + "[" + currentProperty.Name + "]");
                    }
                    sep = ",\r\n";
                }
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by: Insert.cs
    /// </summary>
    protected override string SET_GUID_VALUES(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey)
            {
                if (currentProperty.IsRowGuid)
                {
                    sb.Append(String.Format("SET @{0} = NEWID()\r\n", CORRECT_NAME(currentProperty.Name)));
                }
            }
        }
        return sb.ToString();

    }



    /// <summary>
    /// Used by: Insert.cs
    /// </summary>
    protected override string ALL_VARIABLES_OF_FIELDS_SEPARATED_BY_COMMA(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = @"";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            //if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)
            if (currentProperty.IsUsedByInsertAndUpdate())
            {
                if (currentProperty.NativeType != "None" && !currentProperty.IsIdentity)
                {
                    if (currentProperty.RelatedFields.Count == 0)
                    {
                        if (currentProperty.IsComputed)
                            sb.Append("");
                        else
                        {
                            if (currentProperty.IsRowVersion)
                                sb.Append(sep + "DEFAULT");
                            else
                                sb.Append(sep + "@" + CORRECT_NAME(currentProperty.Name));
                        }
                    }
                    sep = ",\r\n";
                }
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by: Insert.cs
    /// </summary>
    protected override string SET_IDENTITY_VALUES(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey)
            {
                if (currentProperty.IsIdentity)
                {
                    //sb.Append(String.Format("SET @{0} = @@IDENTITY\r\n", CORRECT_NAME(currentProperty.Name)));
                    sb.Append(String.Format("SET @{0} = SCOPE_IDENTITY()\r\n", CORRECT_NAME(currentProperty.Name)));
                }
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by: GetOne.cs
    /// </summary>
    protected override string PK_AS_PARAMETERS(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsPrimaryKey)
            {
                string type = "";
                if (currentProperty.NativeLength == 0 || currentProperty.NativeType.ToLower() == "ntext" || currentProperty.NativeType.ToLower() == "text" || currentProperty.NativeType.ToLower() == "timestamp")
                    type = currentProperty.NativeType;
                else
                {
                    if(currentProperty.NativePrecision + currentProperty.NativeScale!=0)
                        type = currentProperty.NativeType + "(" + currentProperty.NativePrecision + ","+ currentProperty.NativeScale + ")";                    
                    else
                        type = currentProperty.NativeType + "(" + currentProperty.NativeLength + ")";
                }

                sb.Append(sep + "@" + CORRECT_NAME(currentProperty.Name) + " " + type);
                sep = ",\r\n";
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by: Delete.cs
    /// </summary>
    protected override string PK_AS_PARAMETERS_PLUS_ROWVERSION(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsPrimaryKey || (entity.GenerateAsVersionable && currentProperty.IsRowVersion) )
            {
                string type = "";
                if (currentProperty.NativeLength == 0 || currentProperty.NativeType.ToLower() == "ntext" || currentProperty.NativeType.ToLower() == "text" || currentProperty.NativeType.ToLower() == "timestamp")
                    type = currentProperty.NativeType;
                else
                    if (currentProperty.NativePrecision + currentProperty.NativeScale != 0)
                        type = currentProperty.NativeType + "(" + currentProperty.NativePrecision + "," + currentProperty.NativeScale + ")";
                    else
                        type = currentProperty.NativeType + "(" + currentProperty.NativeLength + ")";


                sb.Append(sep + "@" + CORRECT_NAME(currentProperty.Name) + " " + type);
                sep = ",\r\n";
            }
        }
        return sb.ToString();
    }

    protected override string ALL_FIELDS_FOR_SELECT(EntityNode entity, Dictionary<string, string> parameters)
    {
        return ALL_FIELDS_FOR_SELECT(entity, parameters, false);
    }

    /// <summary>
    /// Used by: GetAll.cs, GetOne.cs
    /// </summary>
    protected override string ALL_FIELDS_FOR_SELECT(EntityNode entity, Dictionary<string, string> parameters, bool includeTableName)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)
            {
                if (currentProperty.NativeType != "None")
                {
                    if (currentProperty.RelatedFields.Count == 0)
                    {
                        if (includeTableName)
                        {


                            //if (string.IsNullOrEmpty(entity.Namespace))
                            //    sb.Append(sep + "[" + entity.Name + "].[" + currentProperty.Name + "]");
                            //else
                            //    sb.Append(sep + CORRECT_TABLENAME(entity.Name) + ".[" + currentProperty.Name + "]");


                            if (entity.Name.Contains("."))
                            {
                                string tableName = entity.Name.Substring(entity.Name.IndexOf('.') + 1);
                                string schemaName = entity.Name.Substring(0, entity.Name.IndexOf('.'));
                                string fullTableName = string.Format("{0}].[{1}", schemaName, tableName);
                                sb.Append(sep + "[" + fullTableName + "].[" + currentProperty.Name + "]");
                            }
                            else
                                sb.Append(sep + CORRECT_TABLENAME(entity.Name) + ".[" + currentProperty.Name + "]");

                        }
                        else
                            sb.Append(sep + "[" + currentProperty.Name + "]");
                    }
                    else
                    {
                        string sep2 = "";
                        string funcParams = "";
                        foreach (RelatedField relField in currentProperty.RelatedFields)
                        {
                            funcParams += sep2 + CORRECT_TABLENAME(entity.Name) + ".[" + relField.Name + "]";
                            sep2 = ", ";
                        }
                        sb.Append(sep + "[dbo].[" + parameters["SpPrefix"] + currentProperty.RelatedTableName + "_GetDescription](" + funcParams + ") AS " + currentProperty.Name);
                    }
                    sep = ",\r\n";
                }
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by: Update.cs, Delete.cs
    /// </summary>
    protected override string PK_FIELDS_FOR_SELECT(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsPrimaryKey)
            {
                sb.Append(sep + "[" + currentProperty.Name + "]");
                sep = ", ";
            }
        }
        return sb.ToString();
    }



    /// <summary>
    /// Used by: GetOne.cs
    /// </summary>
    protected override string PK_AS_WHERE(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsPrimaryKey)
            {
                sb.Append(sep + "[" + currentProperty.Name + "] = @" + CORRECT_NAME(currentProperty.Name));
                sep = " AND\r\n";
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by: Delete.cs
    /// </summary>
    protected override string PK_AS_WHERE_PLUS_ROWVERSION(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsPrimaryKey || (entity.GenerateAsVersionable && currentProperty.IsRowVersion))
            {
                sb.Append(sep + "[" + currentProperty.Name + "] = @" + CORRECT_NAME(currentProperty.Name));
                sep = " AND\r\n";
            }
        }
        return sb.ToString();
    }


    /// <summary>
    /// Used by: Update.cs
    /// </summary>
    protected override string ALL_FIELDS_MORE_PK_AS_PARAMETERS(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = @"";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            //if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)
            if (currentProperty.IsUsedByInsertAndUpdate()) 
            {
                if (currentProperty.NativeType != "None")
                {
                    if (currentProperty.RelatedFields.Count == 0)
                    {
                        string outparam = currentProperty.IsAutoGenerated ? " output" : "";
                        string type = "";
                        if (currentProperty.NativeLength == 0 || currentProperty.NativeType.ToLower() == "ntext" || currentProperty.NativeType.ToLower() == "text" || currentProperty.NativeType.ToLower() == "timestamp" || currentProperty.NativeType.ToLower() == "sysname" || currentProperty.NativeType.ToLower() == "xml")
                            type = currentProperty.NativeType;
                        else
                            if (currentProperty.NativeLength == -1)
                                type = currentProperty.NativeType + "(MAX)";
                            else
                                if (currentProperty.NativePrecision + currentProperty.NativeScale != 0)
                                    type = currentProperty.NativeType + "(" + currentProperty.NativePrecision + "," + currentProperty.NativeScale + ")";
                                else
                                    type = currentProperty.NativeType + "(" + currentProperty.NativeLength + ")";


                        sb.Append(sep + "@" + CORRECT_NAME(currentProperty.Name) + " " + type + outparam);
                    }
                    sep = ",\r\n";
                }
            }
        }

        //sep = "";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsPrimaryKey && !currentProperty.IsAutoGenerated)
            {
                string type = "";
                if (currentProperty.NativeLength == 0 || currentProperty.NativeType.ToLower() == "ntext" || currentProperty.NativeType.ToLower() == "text" || currentProperty.NativeType.ToLower() == "timestamp")
                    type = currentProperty.NativeType;
                else
                    if (currentProperty.NativePrecision + currentProperty.NativeScale != 0)
                        type = currentProperty.NativeType + "(" + currentProperty.NativePrecision + "," + currentProperty.NativeScale + ")";
                    else
                        type = currentProperty.NativeType + "(" + currentProperty.NativeLength + ")";


                sb.Append(sep + "@PK_" + CORRECT_NAME(currentProperty.Name) + " " + type);
                sep = ",\r\n";
            }
        }

        return sb.ToString();
    }

    /// <summary>
    /// Used by: Update.cs
    /// </summary>
    protected override string SET_ALL_FIELD_BY_VARIABLES(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = @"";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            //if ((currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey) && !currentProperty.IsAutoGenerated)
            if (currentProperty.IsUsedByInsertAndUpdate())
            {
                if (currentProperty.NativeType != "None")
                {
                    if (currentProperty.RelatedFields.Count == 0 && !currentProperty.IsAutoGenerated)
                    {
                        sb.Append(sep + "[" + currentProperty.Name + "] = @" + CORRECT_NAME(currentProperty.Name));
                    }
                    if (sb.Length != 0) sep = ",\r\n";
                }
            }
        }
        return sb.ToString();
    }

    /// <summary>
    /// Used by: Update.cs
    /// </summary>
    protected override string PK_PK_AS_WHERE(EntityNode entity)
    {
        StringBuilder sb = new StringBuilder();
        string sep = "";
        foreach (BaseTreeNode propNode in entity.Children)
        {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsPrimaryKey || (entity.GenerateAsVersionable && currentProperty.IsRowVersion))
            {
                if (currentProperty.IsAutoGenerated)
                    sb.Append(sep + "[" + currentProperty.Name + "] = @" + CORRECT_NAME(currentProperty.Name));
                else
                    sb.Append(sep + "[" + currentProperty.Name + "] = @PK_" + CORRECT_NAME(currentProperty.Name));
                sep = " AND\r\n";
            }
        }
        return sb.ToString();
    }


    /// <summary>
    /// Used by: Insert.cs, Update.cs
    /// </summary>
    protected override string SET_ROWVERSION(EntityNode entity){
        string template = "SET @{0} = (SELECT [{0}] FROM {1} WHERE {2} )";
        string rowVersion = "";
        foreach (PropertyNode currentProperty in entity.Children)
        {
            if (currentProperty.IsRowVersion)
            {
                rowVersion = currentProperty.Name;
                break;
            }
        }
        string where = ""; string sep = "";
        foreach (PropertyNode currentProperty in entity.Children)
        {
            if (currentProperty.IsPrimaryKey)
            {
                where += sep + "[" + currentProperty.Name + "] = @"+ currentProperty.Name;
                sep = " AND ";
            }
        }
        return string.Format(template, rowVersion, CORRECT_TABLENAME(entity.Name), where);
    }

}
