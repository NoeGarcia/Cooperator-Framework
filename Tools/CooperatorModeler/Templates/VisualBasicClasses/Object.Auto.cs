<%foreach (BaseTreeNode entityNode in Model.Children) {
    EntityNode currentEntity = (EntityNode)entityNode;
    if (currentEntity.GenerateObject && (currentEntity.PrimaryKeyFields.Count != 0 || currentEntity.GenerateAsReadOnly)) {%>
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version <%Response.Write(parameters["GeneratorVersion"]);%>
' Created: <%Response.Write(parameters["AutoFilesDateAndTime"]);%>
' This is a Partial class file. The other one is <%Response.Write(currentEntity.GenerateAs);%>Object.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports System.Net
Imports System.Runtime.Serialization
Imports Cooperator.Framework.Core
Imports System.ComponentModel

Namespace Objects<%Response.Write(currentEntity.FormattedNamespace);%>

    <DataContract() > _
    Public Partial Class <%Response.Write(currentEntity.GenerateAs);%>Object
        Inherits BaseObject
        Implements IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object
        Implements IUniqueIdentifiable
        Implements IEquatable(Of <%Response.Write(currentEntity.GenerateAs);%>Object)
        Implements ICloneable

#Region "Ctor"

        Public Sub New()
            MyBase.New()
<%Response.Write(SET_AUTO_VALUES_FOR_OBJECTS_CTOR(currentEntity));%>
        End Sub

        <% if (PK_PARAMS_FOR_OBJECTS_CTOR(currentEntity).Length > 0) { %>
        Public Sub New(<%Response.Write(PK_PARAMS_FOR_OBJECTS_CTOR(currentEntity));%>)
            MyBase.New()
<%Response.Write(PK_SET_VALUES_FOR_OBJECTS_CTOR(currentEntity));%>
            Call Initialized()
        End Sub
        <% } %>

        <% int noPkCounter = 0;
        foreach (PropertyNode currentProperty in currentEntity.Children)
            if (currentProperty.NativeType != "None" && currentProperty.GenerateProperty && !currentProperty.IsPrimaryKey && !currentProperty.IsForeignKey && !currentProperty.IsRowVersion)
                noPkCounter++;
        if (noPkCounter > 0) { %>
        Public Sub New(<%Response.Write(ALL_FIELDS_PARAMS_FOR_OBJECTS_CTOR(currentEntity));%>)
            MyBase.New()
<%Response.Write(ALL_FIELDS_SET_VALUES_FOR_OBJECTS_CTOR(currentEntity));%>
            Call Initialized()
        End Sub
        <%}%>

#End Region

#Region "Events"

        <%foreach (PropertyNode currentProperty in currentEntity.Children) {
        if (currentProperty.IsDescriptionField && currentProperty.GenerateProperty) {%>
        Public Event Update_<%Response.Write(currentProperty.GenerateAs);%>(ByVal sender As Object, ByVal e As DescriptionFieldEventArg)
        <%}}%>
#End Region

#Region "Fields"

        <%Response.Write(FIELDS_DEFINITION_FOR_OBJECTS(currentEntity));%>
#End Region

#Region "Properties"
        <%foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey  || currentProperty.IsForeignKey)) { 
                string accessModifier = (((currentProperty.IsForeignKey || currentProperty.IsPrimaryKey) && !currentProperty.GenerateProperty) || currentProperty.GenerateAsProtected) ? "Protected Overridable Friend" : "Public Overridable";
                string readOnlyString = (currentProperty.GenerateAsReadOnly) ? " ReadOnly" : "";
                if (currentProperty.IsNullable && currentProperty.CLRType != "System.String" && currentProperty.CLRType != "System.Object" && currentProperty.CLRType != "System.Byte[]") {%>
        ''' <summary>
        ''' Nullable property
        ''' </summary>
        <DataMember()> _
        <%Response.Write(accessModifier + readOnlyString + " Property " + currentProperty.GenerateAs + " As System.Nullable(Of " +currentProperty.CLRType.Replace("[]","()") + ") " );%>
            Get        
                Return _<%Response.Write(currentProperty.GenerateAs);%>
            End Get
            <% if (!currentProperty.GenerateAsReadOnly) { %>
            Set
                MyBase.PropertyModified()
                _<%Response.Write(currentProperty.GenerateAs);%> = value
                <%foreach (PropertyNode currentProperty2 in currentEntity.Children) {
                if (currentProperty2.IsDescriptionField && currentProperty2.GenerateProperty) {
                foreach (RelatedField relField in currentProperty2.RelatedFields){
                if (relField.Name == currentProperty.Name) { %>
                  <% if (currentProperty.IsNullable && currentProperty.CLRType != "System.String") { %> If value.HasValue Then <%}%>
                    Dim e As DescriptionFieldEventArg = New DescriptionFieldEventArg(New <%Response.Write( DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty2.Parent.Parent, currentProperty2.RelatedTableName) + "Object (" + PARAMETERS_FOR_RELATED_FIELD(currentProperty2.RelatedFields, currentEntity) +"))");%>
                    RaiseEvent Update_<%Response.Write(currentProperty2.GenerateAs);%>(Me, e)
                    _<%Response.Write(currentProperty2.GenerateAs);%> = e.DescriptionString
                  <% if (currentProperty.IsNullable && currentProperty.CLRType != "System.String") { %> End If <%}%>
                <%}}}}%>
            End Set
            <%}%>
        End Property
                <% } else { %>
        ''' <summary>
        ''' 
        ''' </summary>
        <DataMember()> _
        <%Response.Write(accessModifier + readOnlyString + " Property " + currentProperty.GenerateAs + " As " + currentProperty.CLRType.Replace("[]","()") );%>
            Get
                Return _<%Response.Write(currentProperty.GenerateAs);%>
            End Get
            <% if (!currentProperty.GenerateAsReadOnly) { %>
            Set
                MyBase.PropertyModified()
                _<%Response.Write(currentProperty.GenerateAs);%> = value
                <%foreach (PropertyNode currentProperty2 in currentEntity.Children) {
                if (currentProperty2.IsDescriptionField && currentProperty2.GenerateProperty) {
                foreach (RelatedField relField in currentProperty2.RelatedFields){
                if (relField.Name == currentProperty.Name) { %>                
                  <% if (currentProperty.IsNullable && currentProperty.CLRType != "System.String") { %> If value.HasValue Then <%}%>
                    Dim e As DescriptionFieldEventArg = New DescriptionFieldEventArg(New <%Response.Write(DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty2.Parent.Parent, currentProperty2.RelatedTableName) + "Object (" + PARAMETERS_FOR_RELATED_FIELD(currentProperty2.RelatedFields, currentEntity) +"))");%>
                    RaiseEvent Update_<%Response.Write(currentProperty2.GenerateAs);%>(Me, e)
                    _<%Response.Write(currentProperty2.GenerateAs);%> = e.DescriptionString
                  <% if (currentProperty.IsNullable && currentProperty.CLRType != "System.String") { %> End If <%}%>
                <%}}}}%>
            End Set
            <%}%>
        End Property
        <%}}}%>
        #End Region

        <%if (currentEntity.ToStringInfo.OverrideToString){%>
        #Region "ToString()"
        <%Response.Write(OVERRIDE_TO_STRING(currentEntity));%>
        #End Region
        <%}%>

        Protected Overrides Sub SetOriginalValue()
            MyBase.InternalOriginalValue = CType(Me.MemberwiseClone(), IObject)
        End Sub

        Protected Overridable Function Clone() As Object Implements ICloneable.Clone
            Dim newObject As <%Response.Write(currentEntity.GenerateAs);%>Object 
            Dim newOriginalValue As <%Response.Write(currentEntity.GenerateAs);%>Object 

            newObject = CType(Me.MemberwiseClone(), <%Response.Write(currentEntity.GenerateAs);%>Object) 
            If (MyBase.InternalOriginalValue IsNot Nothing) Then
                newOriginalValue = CType(Me.OriginalValue().MemberwiseClone(), <%Response.Write(currentEntity.GenerateAs);%>Object)
                newObject.InternalOriginalValue = newOriginalValue
            End If
            Return newObject
        End Function


        ''' <summary>
        ''' Returns de original value of object since was created or restored.
        ''' </summary>
        Public Shadows Function OriginalValue() As <%Response.Write(currentEntity.GenerateAs);%>Object 
           Return CType(MyBase.OriginalValue, <%Response.Write(currentEntity.GenerateAs);%>Object)
        End Function


        Private Sub HydrateFields(<%  string separator = "";
            foreach (PropertyNode currentProperty in currentEntity.Children) {
                if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                    if (currentProperty.IsNullable && currentProperty.CLRType != "System.String" && currentProperty.CLRType != "System.Object" && currentProperty.CLRType != "System.Byte[]") {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As System.Nullable(Of " + currentProperty.CLRType.Replace("[]","()") + ") ");
                    } else {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType.Replace("[]","()"));
                    }
                    separator = ", _\r\n\t\t\t";
            }
        }
        %>) Implements IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object.HydrateFields        
        <%  separator = "\t";
            foreach (PropertyNode currentProperty in currentEntity.Children) {
                if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                    Response.Write(separator + "_" + currentProperty.GenerateAs + " = " + currentProperty.GenerateAs );
                    separator = "\r\n\t\t\t";
                }
            }
        %>
        End Sub

        Private Function GetFieldsForInsert() As Object() Implements IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object.GetFieldsForInsert
        <% separator = ""; int counter = 0; %>
        <% if (currentEntity.SelectedNativePropertiesCount == 0) { %>
            Throw New NotSupportedException()
        <% } else { %>
            Dim _myArray(<%Response.Write((currentEntity.SelectedNativePropertiesCount -1).ToString());%>) As Object
            <%
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if ((currentProperty.NativeType != "None" && !currentProperty.GenerateAsReadOnly && currentProperty.GenerateProperty) || currentProperty.IsPrimaryKey || currentProperty.IsIdentity || currentProperty.IsForeignKey || currentProperty.IsRowVersion) {
                if (currentProperty.IsNullable && currentProperty.CLRType != "System.Object" && currentProperty.CLRType != "System.Byte[]") {
                    if (currentProperty.CLRType == "System.String")
                        Response.Write("If (Not System.String.IsNullOrEmpty(_{1})) Then _myArray({0}) = _{1}\r\n\t\t\t", counter, currentProperty.GenerateAs);
                    else
                        Response.Write("If (_{1}.HasValue) Then _myArray({0}) = _{1}.Value\r\n\t\t\t", counter, currentProperty.GenerateAs);
                } else {
                    Response.Write(String.Format("_myArray({0}) = _{1}\r\n\t\t\t", counter, currentProperty.GenerateAs));
                }
                counter++;
            }}
            %>
            Return _myArray
        <% } // end else %>
        End Function

        Private Function GetFieldsForUpdate() As Object() Implements IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object.GetFieldsForUpdate
        <% int pkFieldCount = 0; %>
        <% if ((currentEntity.SelectedNativePropertiesCount+pkFieldCount) == 0) { %>
            Throw New NotSupportedException()
        <% } else { %>
            <%
            foreach (PropertyNode currentProperty in currentEntity.Children)
                if (currentProperty.IsPrimaryKey && !currentProperty.IsAutoGenerated) pkFieldCount++;
            %>
            Dim _myArray(<%Response.Write((currentEntity.SelectedNativePropertiesCount+pkFieldCount-1).ToString());%>) As Object
            <%separator = ""; counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if ((currentProperty.NativeType != "None" && !currentProperty.GenerateAsReadOnly && currentProperty.GenerateProperty) || currentProperty.IsPrimaryKey || currentProperty.IsIdentity || currentProperty.IsForeignKey || currentProperty.IsRowVersion) {
                if (currentProperty.IsNullable && currentProperty.CLRType != "System.Object" && currentProperty.CLRType != "System.Byte[]") {
                    if (currentProperty.CLRType == "System.String")
                        Response.Write("If (Not System.String.IsNullOrEmpty(_{1})) Then _myArray({0}) = _{1}\r\n\t\t\t", counter, currentProperty.GenerateAs);
                        else
                        Response.Write("If (_{1}.HasValue) Then _myArray({0}) = _{1}.Value\r\n\t\t\t", counter, currentProperty.GenerateAs);
                } else {
                    Response.Write(String.Format("_myArray({0}) = _{1}\r\n\t\t\t", counter, currentProperty.GenerateAs));
                }
                counter++;
            }}
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType != "None" && currentProperty.IsPrimaryKey  && !currentProperty.IsAutoGenerated ) {
                if (currentProperty.IsNullable && currentProperty.CLRType != "System.Object" && currentProperty.CLRType != "System.Byte[]") {
                    if (currentProperty.CLRType == "System.String")
                        Response.Write("If (Not System.String.IsNullOrEmpty(_{1})) Then _myArray({0}) = Me.OriginalValue()._{1}\r\n\t\t\t", counter, currentProperty.GenerateAs);
                    else
                        Response.Write("If (_{1}.HasValue) Then _myArray({0}) = Me.OriginalValue()._{1}.Value\r\n\t\t\t", counter, currentProperty.GenerateAs);
                } else {
                    Response.Write(String.Format("_myArray({0}) = Me.OriginalValue()._{1}\r\n\t\t\t", counter, currentProperty.GenerateAs));
                }
                counter++;
            }}
            %>
            Return _myArray
        <% } // end else %>
        End Function

        Private Function GetFieldsForDelete() As Object() Implements IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object.GetFieldsForDelete
        <% int length = currentEntity.PrimaryKeyFields.Count;
           if (currentEntity.GenerateAsVersionable) length++;
           if (length == 0) { %>
            Throw New NotSupportedException()
        <% } else { %>
            Dim _myArray(<%Response.Write((length-1).ToString());%>) As Object
            <%separator = ""; counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.IsPrimaryKey || currentProperty.IsRowVersion) {
                if (currentProperty.IsNullable && currentProperty.CLRType != "System.Object" && currentProperty.CLRType != "System.Byte[]") {
                    if (currentProperty.CLRType == "System.String")
                        Response.Write("If (Not System.String.IsNullOrEmpty(_{1})) Then _myArray({0}) = _{1}\r\n\t\t\t", counter, currentProperty.GenerateAs);
                    else
                        Response.Write("If (_{1}.HasValue) _myArray({0}) = Then _{1}.Value\r\n\t\t\t", counter, currentProperty.GenerateAs);
                } else {
                    Response.Write(String.Format("_myArray({0}) = _{1}\r\n\t\t\t", counter, currentProperty.GenerateAs));
                }
                counter++;
            }}
            %>
            Return _myArray
        <% } // end else %>
        End Function


        Private Sub UpdateObjectFromOutputParams(parameters As Object()) Implements IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object.UpdateObjectFromOutputParams
            ' Update properties from Output parameters
            <%Response.Write(UPDATE_OBJECT_FROM_OUT_PARAMS(currentEntity));%>
        End Sub

        Private Function Identifier() As Object() Implements IUniqueIdentifiable.Identifier
            Dim o As <%Response.Write(currentEntity.GenerateAs);%>Object = Nothing
            If ObjectStateHelper.IsModified(Me) Then
                o = Me.OriginalValue()
            Else
                o = Me
            End If

            Return New Object() {<%separator = "";
            if (currentEntity.PrimaryKeyFields.Count > 0) { // Si tiene PK
                foreach (string pkField in currentEntity.PrimaryKeyFields) {
                    string pkFieldGenerateAs ="";
                    foreach (PropertyNode currentProperty in currentEntity.Children)
                        if (currentProperty.Name == pkField) pkFieldGenerateAs = currentProperty.GenerateAs;
                    Response.Write(separator + "o." + pkFieldGenerateAs);
                    separator = ", ";
                }
            } else { // Si no tiene PK, se consideran  todos los campos como PK
                foreach (PropertyNode currentProperty in currentEntity.Children) {
                    Response.Write(separator + "o." + currentProperty.GenerateAs);
                    separator = ", ";
                }
            }
            %>}
        End Function


        Public Overloads Function Equals(other As <%Response.Write(currentEntity.GenerateAs);%>Object) As Boolean Implements IEquatable(Of <%Response.Write(currentEntity.GenerateAs);%>Object).Equals
            Return UniqueIdentifierHelper.IsSameObject(CType(Me, IUniqueIdentifiable), CType(other, IUniqueIdentifiable))
        End Function


    End Class

    Public Interface IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object
        Sub HydrateFields(<%  separator = "";
            foreach (PropertyNode currentProperty in currentEntity.Children) {
                if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                    if (currentProperty.IsNullable && currentProperty.CLRType != "System.String" && currentProperty.CLRType != "System.Object" && currentProperty.CLRType != "System.Byte[]") {
                        Response.Write(separator + " ByVal " + currentProperty.GenerateAs + " As System.Nullable(Of " + currentProperty.CLRType.Replace("[]","()") + ") " );
                    } else {
                        Response.Write(separator + " ByVal " + currentProperty.GenerateAs + " As " +currentProperty.CLRType.Replace("[]","()"));
                    }
                    separator = ", _\r\n\t\t\t\t";
            }
        }
        %>)

        Function GetFieldsForInsert() As Object() 

        Function GetFieldsForUpdate() As Object() 

        Function GetFieldsForDelete() As Object()

        Sub UpdateObjectFromOutputParams(ByVal parameters As Object() )
    End Interface

    <CollectionDataContract()> _
    Public Partial Class <%Response.Write(currentEntity.GenerateAs);%>ObjectList
        Inherits ObjectList(Of <%Response.Write(currentEntity.GenerateAs);%>Object)
    End Class
End Namespace

Namespace Views<%Response.Write(currentEntity.FormattedNamespace);%>
    <CollectionDataContract()> _
    Partial Public Class <%Response.Write(currentEntity.GenerateAs);%>ObjectListView
        Inherits ObjectListView(Of Objects.<%Response.Write(currentEntity.FullGenerateAs);%>Object)

        Sub New(ByVal list As Objects.<%Response.Write(currentEntity.FullGenerateAs);%>ObjectList)
            MyBase.New(list)
        End Sub


        #Region " Find Overloads "
        ''' <summary>
        ''' Finds the items that match the specified criteria.
        ''' </summary>
        ''' <param name="property">Property to search.</param>
        ''' <param name="key">Value to find in the property.</param>
        ''' <param name="stringLike">One of the <see cref="StringLike"/> enum values.</param>
        ''' <returns>A list with the items that match the specified criteria.</returns>
        Public Overloads Function Find(ByVal [property] As String, ByVal key As Object, ByVal stringLike As StringLike ) As <%Response.Write(currentEntity.GenerateAs);%>ObjectListView
            Return Find([property], key, True, stringLike)
        End Function

        ''' <summary>
        ''' Finds the items that match the specified criteria.
        ''' </summary>
        ''' <param name="property">Property to search.</param>
        ''' <param name="key">Value to find in the property.</param>
        ''' <param name="ignoreCase">Perform the search on case-sensitive/insensitive mode with strings.</param>
        ''' <param name="stringLike">One of the <see cref="StringLike"/> enum values.</param>
        ''' <returns>A list with the items that match the specified criteria.</returns>
        Public Overloads Function Find(ByVal [property] As String, ByVal key As Object,ByVal ignoreCase As Boolean, ByVal stringLike As StringLike ) As <%Response.Write(currentEntity.GenerateAs);%>ObjectListView
            Dim oProperties As PropertyDescriptorCollection = TypeDescriptor.GetProperties(GetType(Objects.<%Response.Write(currentEntity.FullGenerateAs);%>Object))
            Dim oProp As PropertyDescriptor = oProperties.Find([property], True)
            Dim tempList As <%Response.Write(currentEntity.GenerateAs);%>ObjectListView = New <%Response.Write(currentEntity.GenerateAs);%>ObjectListView(New Objects.<%Response.Write(currentEntity.FullGenerateAs);%>ObjectList)
            Dim listItem As Objects.<%Response.Write(currentEntity.FullGenerateAs);%>Object
            Dim tempObject As Object

            If oProp IsNot Nothing Then
                For i As Integer = 0 To Count - 1
                    listItem = Me.Item(i)

                    tempObject = oProp.GetValue(listItem)

                    If ((key Is Nothing) AndAlso (tempObject Is Nothing)) Then                        ' If the value of the property and the key are null, this is the index.
                        tempList.Add(listItem)

                    ElseIf (tempObject.GetType() Is GetType(String) AndAlso key IsNot Nothing) Then   ' If the value of the property is a string, perform a string comparison.
                        Select Case stringLike
                            Case stringLike.Equal
                                If (String.Compare(tempObject.ToString(), key.ToString(), ignoreCase) = 0) Then 
                                    tempList.Add(listItem)
                                End If

                            Case stringLike.StartsWith
                                If (tempObject.ToString().StartsWith(key.ToString(), ignoreCase, System.Globalization.CultureInfo.CurrentCulture)) Then 
                                    tempList.Add(listItem)
                                End If

                            Case stringLike.EndsWith
                                If (tempObject.ToString().EndsWith(key.ToString(), ignoreCase, System.Globalization.CultureInfo.CurrentCulture)) Then 
                                    tempList.Add(listItem)
                                End If

                            Case stringLike.Contains
                                If (tempObject.ToString().Contains(key.ToString())) Then 
                                    tempList.Add(listItem)
                                End If

                        End Select

                    ElseIf (tempObject IsNot Nothing AndAlso tempObject.Equals(key)) Then  ' If the property is of another type, check with Equals.
                        tempList.Add(listItem)

                    End If

                Next i

            End If

            Return tempList

        End Function

        #End Region  ' Find Overloads

    End Class
End NameSpace

<%
Response.SaveBuffer("\\Objects\\Auto\\" + currentEntity.FullGenerateAs + "Object.Auto.vb");
}
}
%>
