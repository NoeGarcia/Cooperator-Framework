'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version <%Response.Write(parameters["GeneratorVersion"]);%>
' Created: <%Response.Write(parameters["AutoFilesDateAndTime"]);%>
' You can edit this file as your wish.
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Common
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Core
Imports Cooperator.Framework.Core.LazyLoad
Imports <%Response.Write(parameters["RulesProjectName"]);%>.Entities
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection((EntityNode) Model)){
        Response.Write("Imports " + parameters["RulesProjectName"] + ".Entities." + ns + "\r\n");
   }
%>
Imports <%Response.Write(parameters["RulesProjectName"]);%>.Objects
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection((EntityNode) Model)){
        Response.Write("Imports " + parameters["RulesProjectName"] + ".Objects." + ns + "\r\n");
   }
%>
Imports <%Response.Write(parameters["RulesProjectName"]);%>.Gateways
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection((EntityNode) Model)){
        Response.Write("Imports " + parameters["RulesProjectName"] + ".Gateways." + ns + "\r\n");
   }
%>
Imports <%Response.Write(parameters["RulesProjectName"]);%>.Mappers
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection((EntityNode) Model)){
        Response.Write("Imports " + parameters["RulesProjectName"] + ".Mappers." + ns + "\r\n");
   }
%>
Imports System.Collections.Generic

Namespace LazyProviders
    Public Class DefaultLazyProvider
        Implements ILazyProvider
        Private Shared thisLock As Object = New Object()
        Private Shared _mappersCache As Dictionary(Of String, IBaseGateway)
        Friend Shared ReadOnly Property MappersCache As Dictionary(Of String, IBaseGateway)
            Get
                SyncLock thisLock

                    If DefaultLazyProvider._mappersCache Is Nothing Then
                        DefaultLazyProvider._mappersCache = New Dictionary(Of String, IBaseGateway)()
                        <%foreach (BaseTreeNode entityNode in Model.Children) {
                        EntityNode currentEntity = (EntityNode)entityNode;
                        if (currentEntity.GenerateObject && currentEntity.GenerateEntity && currentEntity.PrimaryKeyFields.Count != 0) {%> 
                        DefaultLazyProvider._mappersCache.Add("<%Response.Write(parameters["RulesProjectName"]);%>.Entities.<%Response.Write(currentEntity.FullGenerateAs);%>", <%Response.Write(parameters["RulesProjectName"]);%>.Mappers.<%Response.Write(currentEntity.FullGenerateAs);%>Mapper.Instance())
                        <% } 
                        if (currentEntity.GenerateObject && currentEntity.PrimaryKeyFields.Count != 0) {%> 
                        DefaultLazyProvider._mappersCache.Add("<%Response.Write(parameters["RulesProjectName"]);%>.Objects.<%Response.Write(currentEntity.FullGenerateAs);%>Object", <%Response.Write(parameters["RulesProjectName"]);%>.Gateways.<%Response.Write(currentEntity.FullGenerateAs);%>Gateway.Instance())
                    <%}}%>
                    End If

                End SyncLock

                Return DefaultLazyProvider._mappersCache
            End Get
        End Property

        ''' <summary>
        ''' Get associated entity for this entity
        ''' </summary>
        Public Function GetEntity(ByVal child As System.Type, ByVal identifier As IUniqueIdentifiable) As IUniqueIdentifiable Implements ILazyProvider.GetEntity
            Dim genericGateway As IGenericGateway = CType(DefaultLazyProvider.MappersCache(child.FullName), IGenericGateway)
            Return CType(genericGateway.GetOne(identifier), IUniqueIdentifiable)
        End Function

        ''' <summary>
        ''' Get collection based in the parent entity
        ''' </summary>
        Public Function GetList(child As System.Type, parent As IUniqueIdentifiable) As Object Implements ILazyProvider.GetList
            Dim genericGateway As IGenericGateway = CType(DefaultLazyProvider.MappersCache(child.FullName), IGenericGateway)
            Return genericGateway.GetByParent(parent)
        End Function
    End Class
End Namespace

  Namespace MapperRepositoy


    Public Class Respository
        Private Shared ReadOnly Repo As DefaultRepository = New DefaultRepository()

        ''' <summary>
        ''' Este repositorio debe usarse en produccion, ya que devuelve los mappers propiamente dichos.
        ''' </summary>
        Public Shared Function GetDefault() As DefaultRepository
            Return Repo
        End Function

        ''' <summary>
        ''' Obtiene un nuevo repositorio (para usar con test), deben cargarse los mocks de mappers usando el metodo Add.
        ''' </summary>
        Public Shared Function GetTestRepository() As TestRepository
            Return New TestRepository()
        End Function
    End Class


    Public Class DefaultRepository
        Implements IMapperRepository

        ''' <summary>
        ''' Obtiene un mapper o gateway por medio de su interface
        ''' </summary>
        Public Function [Get](Of T As IBaseGateway)() As T Implements IMapperRepository.[Get]

            For Each i As IBaseGateway In LazyProviders.DefaultLazyProvider.MappersCache.Values
                If GetType(T).IsAssignableFrom(i.GetType()) Then
                    Return CType(i, T)
                End If
            Next
            Return Nothing
        End Function

        Public Function GetAndBeginTransaction(ByVal rule As BaseRule) As DbTransaction Implements IMapperRepository.GetAndBeginTransaction
            Return rule.DataBaseHelper.GetAndBeginTransaction()
        End Function

        Public Sub CommitTransaction(ByVal tr As DbTransaction) Implements IMapperRepository.CommitTransaction
            tr.Commit()
        End Sub

        Public Sub RollBackTransaction(ByVal tr As DbTransaction) Implements IMapperRepository.RollBackTransaction
            tr.Rollback()
        End Sub

        Public Sub DisposeTransaction(ByVal tr As DbTransaction) Implements IMapperRepository.DisposeTransaction
            tr.Dispose()
        End Sub

        Public Function GetConnection(ByVal tran As DbTransaction) As DbConnection Implements IMapperRepository.GetConnection
            Return tran.Connection
        End Function

        Public Sub CloseConnection(ByVal conn As DbConnection) Implements IMapperRepository.CloseConnection
            conn.Close()
        End Sub
    End Class



    Public Class TestRepository
        Implements IMapperRepository

        Private _mappersCache As Dictionary(Of String, IBaseGateway)

        Public Sub New()
            _mappersCache = New Dictionary(Of String, IBaseGateway)()
        End Sub

        ''' <summary>
        ''' Obtiene un mapper o gateway por su interface
        ''' </summary>
        Public Function [Get](Of T As IBaseGateway)() As T Implements IMapperRepository.[Get]

            For Each i As IBaseGateway In _mappersCache.Values

                If GetType(T).IsAssignableFrom(i.GetType()) Then
                    Return CType(i, T)
                End If
            Next
            Return Nothing
        End Function

        Public Function GetAndBeginTransaction(ByVal rule As BaseRule) As DbTransaction Implements IMapperRepository.GetAndBeginTransaction
            Return Nothing
        End Function

        Public Sub CommitTransaction(ByVal tr As DbTransaction) Implements IMapperRepository.CommitTransaction
        End Sub

        Public Sub RollBackTransaction(ByVal tr As DbTransaction) Implements IMapperRepository.RollBackTransaction
        End Sub

        Public Sub DisposeTransaction(ByVal tr As DbTransaction) Implements IMapperRepository.DisposeTransaction
        End Sub

        Public Function GetConnection(ByVal tran As DbTransaction) As DbConnection Implements IMapperRepository.GetConnection
            Return Nothing
        End Function

        Public Sub CloseConnection(ByVal conn As DbConnection) Implements IMapperRepository.CloseConnection
        End Sub

        ''' <summary>
        ''' Permite injectar un mapper. Pensado para poder agregar un mock de un mapper, para hacer test
        ''' </summary>
        Public Sub Add(Of T As IBaseGateway)(mapper As T)
            Dim typeName As String = GetType(T).FullName
            If (_mappersCache.ContainsKey(typeName)) Then
                _mappersCache.Remove(typeName)
            End If

            _mappersCache.Add(typeName, CType(mapper, IBaseGateway))
        End Sub

        ''' <summary>
        ''' Limpia la cache de repositorios. Solo debe llamarse a este metodo en un ambiente de test, injectando los mocks de los mappers con el metodo Add
        ''' </summary>
        Public Sub Clear()

            _mappersCache = New Dictionary(Of String, IBaseGateway)()
        End Sub

    End Class

    Public Interface IMapperRepository
        Function [Get](Of T As IBaseGateway)() As T

        Function GetAndBeginTransaction(rule As BaseRule) As DbTransaction
        Sub CommitTransaction(tr As DbTransaction)
        Sub RollBackTransaction(tr As DbTransaction)
        Sub DisposeTransaction(tr As DbTransaction)

        Function GetConnection(tran As DbTransaction) As DbConnection
        Sub CloseConnection(conn As DbConnection)

    End Interface

End Namespace



<%Response.SaveBuffer("\\LazyProviders\\DefaultLazyProvider.vb");%>

