<%
foreach (BaseTreeNode entityNode in Model.Children) {
    EntityNode currentEntity = (EntityNode)entityNode;
    if (currentEntity.GenerateObject && (currentEntity.PrimaryKeyFields.Count != 0 || currentEntity.GenerateAsReadOnly)) {%>
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version <%Response.Write(parameters["GeneratorVersion"]);%>
' Created: <%Response.Write(parameters["AutoFilesDateAndTime"]);%>
' This is a partial class file. The other one is <%Response.Write(currentEntity.GenerateAs);%>Mapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports <%Response.Write(parameters["RulesProjectName"]);%>.Entities<%Response.Write(currentEntity.FormattedNamespace);%>
Imports <%Response.Write(parameters["RulesProjectName"]);%>.Objects<%Response.Write(currentEntity.FormattedNamespace);%>
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers<%Response.Write(currentEntity.FormattedNamespace);%>

    <% string ObjectWordOrSpace = (currentEntity.GenerateEntity) ? "" : "Object";
    string EntitiesOrObjects = (currentEntity.GenerateEntity) ? "Entities" : "Objects"; %>


    Friend Module <%Response.Write(currentEntity.GenerateAs);%>MapperInstance
        Private _instance As <%Response.Write(currentEntity.GenerateAs);%>Mapper

		Public Function GetInstance() As <%Response.Write(currentEntity.GenerateAs);%>Mapper
			If _instance Is Nothing Then
				_instance = New <%Response.Write(currentEntity.GenerateAs);%>Mapper
            End If
	
			Return _instance
        End Function
    End Module



    <% string sReturn=""; string separator = ""; int counter = 0; bool isTheSame = false; %>


    Public Interface I<%Response.Write(currentEntity.GenerateAs);%>Mapper
        Inherits IBaseGateway(Of <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List)

        Function GetPKPropertiesNames() as string()

        Function GetMappingType() as Type

        <% if (currentEntity.GenerateEntity) { %>

        <% bool haveCollections = false;
        foreach(PropertyNode currentProperty in currentEntity.Children)
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation ))&& currentProperty.GenerateProperty) haveCollections = true;
        if (haveCollections) { %>
        Sub Insert(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>)

        Sub Insert(ByVal transaction As DbTransaction,ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>)

        Sub Delete(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>)

        Sub Delete(ByVal transaction As DbTransaction, ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>)        

        Sub Save(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>)

        Sub Save(ByVal transaction As DbTransaction, ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>)

        Sub Update(entityList As <%Response.Write(currentEntity.GenerateAs);%>List)

        Sub Update(ByVal transaction As DbTransaction, entityList As <%Response.Write(currentEntity.GenerateAs);%>List)

        Sub Update(Of T as {<%Response.Write(currentEntity.GenerateAs);%>, new})(entityList As  ObjectList(of T))

        Sub Update(Of T As {<%Response.Write(currentEntity.GenerateAs);%>, new})(ByVal transaction As DbTransaction, entityList As ObjectList(of T))

        <%}%>

        
        Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
        <% } /* end if */ %>  

        Function GetOneBySQLQuery(sqlQueryText As String) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>

        Function GetBySQLQuery(sqlQueryText As String) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List


        <% if(currentEntity.PrimaryKeyFields.Count > 0) { %>
        Function GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>

        <% } // if(currentEntity.PrimaryKeyFields.Count > 0) %>

        ' GetOne By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        Function GetOne(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>        
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List

        Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List
    <%}}%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' 
        ''' </summary>
        Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction,<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List

        Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction, ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List

    <%}}%>

        





        <% if (!currentEntity.GenerateAsReadOnly) { %>
        Sub Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>)

        Sub Delete(ByVal transaction As DbTransaction ,<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>)

        ' Delete By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        Sub Delete(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable , <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField + " As "+ whatType );
                                separator = ", ";
                            }
                            count++;
                        }%>)

        Sub Delete(ByVal transaction As DbTransaction, ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable , <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField + " As " + whatType );
                                separator = ", ";
                            }
                            count++;
                        }%>)
                        <%}
                    }
                }
            }%>



        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType );
            separator = ", ";
        }
        %>)

        Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction , <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType );
            separator = ", ";
        }
        %>)


        Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable)

        Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction, ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable)        

        <% } // if (!currentEntity.GenerateAsReadOnly) %>

    <%}}%>


        'Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace;
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace+ "List";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            
        Function <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) As <%Response.Write(returnType);%>

        
        Function <%Response.Write(query.QueryName);%>(transaction As DbTransaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>) As <%Response.Write(returnType);%>

        <%
        } 
        }
        %>


    End Interface



































    Public Partial Class <%Response.Write(currentEntity.GenerateAs);%>Mapper
        Inherits BaseGateway(Of <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List)
        Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper
        Implements IGenericGateway

        Friend Sub New()
        End Sub

        Public Shared Function Instance() As <%Response.Write(currentEntity.GenerateAs);%>Mapper
            Return <%Response.Write(currentEntity.GenerateAs);%>MapperInstance.GetInstance()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() As String() Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetPKPropertiesNames
            <%
            sReturn="";separator = "";
            sReturn="{\"";
            foreach (string fpk in currentEntity.PrimaryKeyFields)
            {
                sReturn+=separator+(currentEntity.FindInChildrenByName(fpk) as PropertyNode).GenerateAs;
                separator="\",\"";
            }
            sReturn+="\"}";
            %>
            Dim  s() as String=<%Response.Write(sReturn);%>
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() As Type Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetMappingType
            return GetType(<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "<%Response.Write(currentEntity.Name);%>"
            End Get
        End Property

        ''' <summary>
        ''' Return the <%Response.Write(currentEntity.GenerateAs);%>Gateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(<%Response.Write(currentEntity.GenerateAs);%>Mapper).FullName
            End Get
        End Property


        <%if (currentEntity.GenerateAsReadOnly) { %>
        ''' <summary>
        ''' If this table is read only
        ''' </summary>
        Protected Overrides Function IsReadOnly() As Boolean
            Return True
        End Function
        <%}%>

        <%if (currentEntity.GenerateAsCacheable) { %>
        ''' <summary>
        ''' If this table is cacheable
        ''' </summary>
        Protected Overrides Function IsCacheable() As Boolean
                Return True
        End Function
        <%}%>

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>)
            <% counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
              if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                   if (currentProperty.NativeLength == -1) {
                       Response.Write(String.Format("Dim l{2} As Integer: If Not reader.IsDBNull({2}) Then l{2} = CInt(reader.GetBytes({2}, 0, Nothing, 0, 100000000))-1 \r\n Dim _{0}(l{2}) As System.Byte : If Not reader.IsDBNull({2}) Then reader.GetBytes({2}, 0, _{0}, 0, l{2}+1)\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    } else {
                       Response.Write(String.Format("Dim _{0}({1}) As System.Byte: If Not reader.IsDBNull({2}) Then _{0} = TryCast(reader.GetValue({2}), Byte())\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    }
                } else {
                if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {

                    string readerType = currentProperty.CLRType.Replace("System.","");
                    if (readerType == "Object") readerType = "Value";
                    if (currentProperty.NativeType == "real") readerType= "Float";
                    if (currentProperty.CLRType == "System.String"){
                        Response.Write("Dim _" + currentProperty.GenerateAs + " As String\r\n");
                        Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                        Response.Write("\t _" + currentProperty.GenerateAs + " = \"\"\r\n");
                        Response.Write("Else\r\n");
                        Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                        Response.Write("End If\r\n");
                    } else {
                        if (currentProperty.CLRType == "System.Object"){
                            Response.Write("Dim _" + currentProperty.GenerateAs + " As Object\r\n");
                            Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = Nothing\r\n");
                            Response.Write("Else\r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                            Response.Write("End If\r\n");
                        } else {
                            Response.Write("Dim _" + currentProperty.GenerateAs + " As System.Nullable(Of " + currentProperty.CLRType + ") \r\n");
                            Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = New System.Nullable(Of " + currentProperty.CLRType + ")\r\n");
                            Response.Write("Else\r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                            Response.Write("End If\r\n");
                        }
                    }
                }
                }
                counter++;
                }
            }%>
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object  = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            <%Response.Write(currentEntity.GenerateAs);%>.HydrateFields(<%separator = ""; counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                    Response.Write(separator + "_" + currentProperty.GenerateAs);
                } else {
                    if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {
                        Response.Write(separator + "_" + currentProperty.GenerateAs);
                    } else {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType = "Float";
                        Response.Write(separator + "reader.Get" + readerType + "(" + counter.ToString() + ")");
                    }        
                }
                separator = ", _\r\n";
                counter++;
            }}
            %>)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>) As Object()
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            Return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>) As Object()
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            Return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>) As Object()
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            Return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "<%Response.Write(parameters["SpPrefix"]);%>"
        End Function


        <% if (currentEntity.GenerateEntity) { %>


        <% foreach(PropertyNode currentProperty in currentEntity.Children) {
        if ((currentProperty.IsPrimaryKey || currentProperty.IsForeignKey) && !currentProperty.GenerateProperty) { %>
        Private Shared _<%Response.Write(currentProperty.GenerateAs);%>FieldInfo As FieldInfo = GetType(<%Response.Write(currentEntity.GenerateAs);%>Object).GetField("_<%Response.Write(currentProperty.GenerateAs);%>", BindingFlags.NonPublic Or BindingFlags.Instance)
        <%}}%>

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>)
            <%Response.Write(SET_AGGREGATIONS(currentEntity));%>
            CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>).CompleteEntity(<%Response.Write(AGGREGATIONS_NAMES_FOR_IMAPPEABLE(currentEntity));%>)
        End Sub


        # Region "CRUD Operations"
        <% bool haveCollections = false;
        foreach(PropertyNode currentProperty in currentEntity.Children)
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation ))&& currentProperty.GenerateProperty) haveCollections = true;
        if (haveCollections) { %>
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overrides Sub Insert(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Insert
            Dim transaction As DbTransaction = MyBase.DataBaseHelper.GetAndBeginTransaction()
            Dim conn As DbConnection = transaction.Connection
            Try
                Insert(transaction, entity)
                transaction.Commit()      
            Catch ex As Exception
                transaction.Rollback()
                Throw
            Finally
                conn.Close()
                transaction.Dispose()
            End Try
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overrides Sub Insert(ByVal transaction As DbTransaction,ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Insert
            MyBase.Insert(transaction, entity)
            CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>).SetFKValuesForChilds(entity)
            <%foreach(PropertyNode currentProperty in currentEntity.Children) {
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation))&& currentProperty.GenerateProperty) {
                string mapperOrGateway = (currentProperty.CLRType.EndsWith("ObjectList") || currentProperty.CLRType.EndsWith("Object")) ? "Gateway" : "Mapper"; 
                string collectionName = DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName);
                string methodName = (currentProperty.IsCollection) ? "Append" : "Insert";
                if (currentProperty.GenerateAsLazyLoad) {%>
            If Not CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>).Is<%Response.Write(currentProperty.GenerateAs);%>Null() Then 
                <%} else {%>
            If entity.<%Response.Write(currentProperty.GenerateAs);%> IsNot Nothing Then 
                <%}%>
                <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().<%Response.Write(methodName);%>(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>)
            End If
            <%}}%>            
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overrides Sub Delete(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Delete
            Dim transaction As DbTransaction = MyBase.DataBaseHelper.GetAndBeginTransaction()
            Dim conn As DbConnection = transaction.Connection
            Try
                Delete(transaction, entity)
                transaction.Commit()
            Catch ex As Exception
                transaction.Rollback()
                Throw
            Finally
                conn.Close()
                transaction.Dispose()
            End Try
        End Sub 

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overrides Sub Delete(ByVal transaction As DbTransaction, ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Delete

            Me.DeleteChildren(transaction, entity)                        
            MyBase.Delete(transaction, entity)

        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overrides Sub Save(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Save
            Dim transaction As DbTransaction = MyBase.DataBaseHelper.GetAndBeginTransaction()
            Dim conn As DbConnection = transaction.Connection
            Try
                Save(transaction, entity)
                transaction.Commit()
            Catch ex As Exception
                transaction.Rollback()
                Throw
            Finally
                conn.Close()
                transaction.Dispose()
            End Try
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overrides Sub Save(ByVal transaction As DbTransaction, ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Save
            MyBase.Save(transaction, entity)
            CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>).SetFKValuesForChilds(entity)
            <%foreach(PropertyNode currentProperty in currentEntity.Children) {
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation))&& currentProperty.GenerateProperty) {
                string mapperOrGateway = (currentProperty.CLRType.EndsWith("ObjectList") || currentProperty.CLRType.EndsWith("Object")) ? "Gateway" : "Mapper"; 
                string collectionName = DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName);
                if (currentProperty.GenerateAsLazyLoad) {%>
            If Not CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>).Is<%Response.Write(currentProperty.GenerateAs);%>Null() Then
                <%} else {%>
            If entity.<%Response.Write(currentProperty.GenerateAs);%> IsNot Nothing Then
                <%}%>
                <%if (currentProperty.IsCollection) { %>
                <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().Update(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>)
                <%} else { %>
                If ObjectStateHelper.IsNew(entity.<%Response.Write(currentProperty.GenerateAs);%>) Then
                    <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().Insert(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>)
                ElseIf ObjectStateHelper.IsDeleted(entity.<%Response.Write(currentProperty.GenerateAs);%>) Then
                    <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().Delete(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>)
                Else
                    <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().Save(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>)
                End If             
                <%}%>
            End If
            <%}}%>            
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overrides Sub Update(entityList As <%Response.Write(currentEntity.GenerateAs);%>List) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Update 
            Dim transaction As DbTransaction = MyBase.DataBaseHelper.GetAndBeginTransaction()
            Dim conn As DbConnection = transaction.Connection
            Try
                Update(transaction, entityList)
                transaction.Commit()
            Catch ex As Exception
                transaction.Rollback()
                Throw
            Finally
                conn.Close()
                transaction.Dispose()
            End Try
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overrides Sub Update(ByVal transaction As DbTransaction, entityList As <%Response.Write(currentEntity.GenerateAs);%>List) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Update
            Dim localTransaction As Boolean = False
            Dim conn As DbConnection = Nothing
            If transaction Is Nothing Then
                localTransaction = True
                transaction = MyBase.DataBaseHelper.GetAndBeginTransaction()
                conn = transaction.Connection                
            End If

            Try

                Dim deletedItems As IObjectList(Of <%Response.Write(currentEntity.GenerateAs);%>) = CType(entityList, IObjectList(Of <%Response.Write(currentEntity.GenerateAs);%>)).DeletedItems()
                For Each entity As <%Response.Write(currentEntity.GenerateAs);%> in deletedItems
                    If ObjectStateHelper.IsDeleted(entity) Then
                        Delete(transaction, entity)
                        ObjectStateHelper.SetAsDeleted(entity)
                    End If
                Next

                For Each entity As <%Response.Write(currentEntity.GenerateAs);%> in entityList
                    If ObjectStateHelper.IsNew(entity) Then
                        Insert(transaction, entity)
                    ElseIf ObjectStateHelper.IsDeleted(entity) Then
                        Delete(transaction, entity)
                        ObjectStateHelper.SetAsDeleted(entity)
                    Else
                        Save(transaction, entity)
                    End If
                Next        
                For i As Integer = entityList.Count -1 To 0 Step -1 
                    If ObjectStateHelper.IsDeleted(entityList(i)) Then
                        entityList.RemoveAt(i)
                    End If
                Next

                CType(entityList, IObjectList(Of <%Response.Write(currentEntity.GenerateAs);%>)).ResetDeletedItems()

                If localTransaction Then
                    transaction.Commit()
                End If                

            Catch ex As Exception
                If localTransaction Then
                    transaction.Rollback()
                End If
                Throw
            Finally
                If localTransaction Then
                    conn.Close()
                    transaction.Dispose()
                End If
            End Try

        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Update(of T as {<%Response.Write(currentEntity.GenerateAs);%>, new})(entityList As  ObjectList(of T)) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Update
            Dim transaction As DbTransaction = MyBase.DataBaseHelper.GetAndBeginTransaction()
            Dim conn As DbConnection = transaction.Connection
            Try
                Update(of T)(transaction, entityList)
                transaction.Commit()
            Catch ex As Exception
                transaction.Rollback()
                Throw
            Finally
                conn.Close()
                transaction.Dispose()
            End Try
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Update(of T As {<%Response.Write(currentEntity.GenerateAs);%>, new})(ByVal transaction As DbTransaction, entityList As ObjectList(of T)) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Update
            Dim localTransaction As Boolean = False
            Dim conn As DbConnection = Nothing
            If transaction Is Nothing Then
                localTransaction = True
                transaction = MyBase.DataBaseHelper.GetAndBeginTransaction()
                conn = transaction.Connection                
            End If

            Try

                Dim deletedItems As IObjectList(Of T) = CType(entityList, IObjectList(Of T)).DeletedItems()
                For Each entity As T in deletedItems
                    If ObjectStateHelper.IsDeleted(entity) Then
                        Delete(transaction, CType(entity, <%Response.Write(currentEntity.GenerateAs);%>))
                        ObjectStateHelper.SetAsDeleted(entity)
                    End If
                Next

                For Each entity As T in entityList
                    If ObjectStateHelper.IsNew(entity) Then
                        Insert(transaction, CType(entity,<%Response.Write(currentEntity.GenerateAs);%>))
                    ElseIf ObjectStateHelper.IsDeleted(entity) Then
                        Delete(transaction, CType(entity,<%Response.Write(currentEntity.GenerateAs);%>))
                        ObjectStateHelper.SetAsDeleted(entity)
                    Else
                        Save(transaction, CType(entity,<%Response.Write(currentEntity.GenerateAs);%>))
                    End If
                Next        
                For i As Integer = entityList.Count -1 To 0 Step -1 
                    If ObjectStateHelper.IsDeleted(entityList(i)) Then
                        entityList.RemoveAt(i)
                    End If
                Next

                CType(entityList, IObjectList(Of T)).ResetDeletedItems()

            Catch ex As Exception
                If localTransaction Then
                    transaction.Rollback()
                End If
                Throw
            Finally
                If localTransaction Then
                    conn.Close()
                    transaction.Dispose()
                End If
            End Try

        End Sub


        <%}%>

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.DeleteChildren
            <%bool isHaveChildDefined = false;
            foreach(PropertyNode currentProperty in currentEntity.Children) {
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation))&& currentProperty.GenerateProperty) {

                string mapperOrGateway = (currentProperty.CLRType.EndsWith("ObjectList") || currentProperty.CLRType.EndsWith("Object")) ? "Gateway" : "Mapper";  
                string collectionName = DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName);
                string GetByXXXX = GET_GETBYXXXXX_FOR_RELATEDTABLE(currentProperty.RelatedTableName, currentProperty.RelatedFields, currentProperty.Parent.Parent);
                string deleteMethodName = "DeleteBy" + GetByXXXX; 
                string getMethodName = "GetBy" + GetByXXXX; 

                if (mapperOrGateway.StartsWith("Mapper")) { 
                if (!isHaveChildDefined) {
                    isHaveChildDefined = true;
                    Response.Write("\r\nDim haveChild as Boolean = False");
                }
                else
                    Response.Write("\r\nhaveChild = False");                                
                %>
                For Each child As IUniqueIdentifiable In Gateways.<%Response.Write(collectionName);%>Gateway.Instance().<%Response.Write(getMethodName);%>(transaction, entity)
                    <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().DeleteChildren(transaction, child)
                    haveChild = True
                Next
                <%}
                if (mapperOrGateway.StartsWith("Mapper")) { %>
                If haveChild Then
                <% } 
                    Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().<%Response.Write(deleteMethodName);%>(transaction, entity)
                <% if (mapperOrGateway.StartsWith("Mapper")) { %>
                End If
                <% } %>
            <%}}%>            
        End Sub


        <% } /* end if */ %>  



        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%> by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetOneBySQLQuery
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>List by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetBySQLQuery
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        <% if(currentEntity.PrimaryKeyFields.Count > 0) { %>
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetOne
            Return MyBase.GetOne(New <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>))
        End Function

        <% } // if(currentEntity.PrimaryKeyFields.Count > 0) %>

        ' GetOne By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>  Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetOne
        Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>))
        End Function   
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Function

    <%}}%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction,<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List  Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction, ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Function

    <%}}%>

        





        <% if (!currentEntity.GenerateAsReadOnly) { %>
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Delete
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Delete
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        End Sub

        ' Delete By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable , <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField + " As "+ whatType );
                                separator = ", ";
                            }
                            count++;
                        }%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Delete
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>))
        End Sub  

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction, ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable , <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField + " As " + whatType );
                                separator = ", ";
                            }
                            count++;
                        }%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.Delete
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>))
        End Sub   
                        <%}
                    }
                }
            }%>



        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType );
            separator = ", ";
        }
        %>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction , <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType );
            separator = ", ";
        }
        %>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction, ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable)  Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Sub

        <% } // if (!currentEntity.GenerateAsReadOnly) %>

    <%}}%>


        'Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace;
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace+ "List";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            
        ''' <summary>
        ''' 
        ''' </summary>
        Public Function <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) As <%Response.Write(returnType);%> Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.<%Response.Write(query.QueryName);%>
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            Return CType(MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>), <%Response.Write(returnType);%>)
            <% } else { 
            if (query.ReturnType == DatabaseQueryReturnType.DataReader) {%>
            Return MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>            
            Dim ds As DataSet = New DataSet()
            Dim tbl As String() = {"table"}
            MyBase.DataBaseHelper.FillDataSetByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            Return ds.Tables(0)
            <% } else { %>
            Return MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% }}} %>
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Function <%Response.Write(query.QueryName);%>(transaction As DbTransaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>) As <%Response.Write(returnType);%> Implements I<%Response.Write(currentEntity.GenerateAs);%>Mapper.<%Response.Write(query.QueryName);%>
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            Return CType(MyBase.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>), <%Response.Write(returnType);%>)
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>
            Dim ds As DataSet = New DataSet()
            Dim tbl As String() = {"table"}
            MyBase.DataBaseHelper.FillDataSetByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            Return ds.Tables(0)
            <% } else { %>
            Return MyBase.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% }} %>
        End Function

        <%
        } 
        }
        %>






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace










Namespace Wrappers<%Response.Write(currentEntity.FormattedNamespace);%>
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class <%Response.Write(currentEntity.GenerateAs);%>MapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As <%Response.Write(parameters["RulesProjectName"]);%>.Mappers.<%Response.Write(currentEntity.FullGenerateAs);%>Mapper
            Return <%Response.Write(parameters["RulesProjectName"]);%>.Mappers.<%Response.Write(currentEntity.FullGenerateAs);%>Mapper.Instance()
        End Function

        <% if(currentEntity.PrimaryKeyFields.Count > 0) { %>
        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%> Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }}
            %>) As <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%>         
            Return Instance().GetOne( <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        End Function
        <% } // if(currentEntity.PrimaryKeyFields.Count > 0) %>

        ' GetBy Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>  by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + "ByVal " + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>) As <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%>
            return Instance().GetOne(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        End Function   
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List by calling a Stored Procedure
        ''' </summary>
        Public Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + " ByVal " + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(EntitiesOrObjects + "." +currentEntity.FullGenerateAs + ObjectWordOrSpace);%>List 
            Return Instance().GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Function

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List by calling a Stored Procedure
        ''' </summary>
        Public Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal  <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%>List
            Return Instance().GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        End Function

    <%}}%>

        ''' <summary>
        ''' GetAll <%Response.Write(currentEntity.GenerateAs);%> 
        ''' </summary>
        Public Function GetAll() As <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%>List
            Return Instance().GetAll()
        End Function

        <% if (!currentEntity.GenerateAsReadOnly) { %>
        <% if (currentEntity.GenerateEntity) {%>

        ''' <summary>
        ''' Delete children for <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        <% } %>


            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%>
        ''' </summary>
        Public Overloads Sub Delete(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + " ByVal " + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>)
            Instance().Delete(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        End Sub   
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Public Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + " ByVal " + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>)
            Instance().DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Sub

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Public Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable )
            Instance().DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        End Sub

    <%}}%>

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> 
        ''' </summary>
        Public Overloads Sub Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>)
            Instance().Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        End Sub

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As <%Response.Write(EntitiesOrObjects + "." +currentEntity.FullGenerateAs + ObjectWordOrSpace);%>)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save <%Response.Write(currentEntity.GenerateAs);%>  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As <%Response.Write(EntitiesOrObjects + "." +currentEntity.FullGenerateAs + ObjectWordOrSpace);%>)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert <%Response.Write(currentEntity.GenerateAs);%> 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As <%Response.Write(EntitiesOrObjects + "." +currentEntity.FullGenerateAs + ObjectWordOrSpace);%>)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save <%Response.Write(currentEntity.GenerateAs);%> 
        ''' </summary>
        Public Overloads Sub Save(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey){
                        if (currentProperty.NativeType != "None" &&  currentProperty.CLRType != "System.Byte[]"){
                            Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                            separator = ", ";
                        }
                    }
                }
            %>)
            Dim entity As <%Response.Write(EntitiesOrObjects + "." +currentEntity.FullGenerateAs + ObjectWordOrSpace);%> = Instance().GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: <% 
                counter = 0;
                separator = "";
                foreach (PropertyNode currentProperty in currentEntity.Children) {
                    if (currentProperty.IsPrimaryKey) {
                       Response.Write(separator + "{" + counter.ToString() + "} = {" + (counter+1).ToString() + "}");
                       separator = ", ";
                       counter++;
                       counter++;
                    }            
                }%>", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "\"" + currentProperty.GenerateAs + "\", " + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>))
            End If
<%                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.GenerateProperty){
                        if (!currentProperty.IsPrimaryKey && currentProperty.NativeType != "None" &&  currentProperty.CLRType != "System.Byte[]" && !currentProperty.GenerateAsReadOnly)
                            {
                            Response.Write("            entity." + currentProperty.GenerateAs + " = " + currentProperty.GenerateAs + "\r\n");
                        }
                    }
                }
                
%>            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert <%Response.Write(currentEntity.GenerateAs);%>
        ''' </summary>
        Public Overloads Sub Insert(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.GenerateProperty){
                        if (currentProperty.NativeType != "None" &&  currentProperty.CLRType != "System.Byte[]" && !currentProperty.GenerateAsReadOnly){
                            Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                            separator = ", ";
                        }
                    }
                }
        %>)
            Dim entity As <%Response.Write(EntitiesOrObjects + "." +currentEntity.FullGenerateAs + ObjectWordOrSpace);%> = New <%Response.Write(EntitiesOrObjects + "." +currentEntity.FullGenerateAs + ObjectWordOrSpace);%>
<%
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.GenerateProperty){
                        if (!currentProperty.IsAutoGenerated && currentProperty.NativeType != "None" &&  currentProperty.CLRType != "System.Byte[]" && !currentProperty.GenerateAsReadOnly){
                            Response.Write("            entity." + currentProperty.GenerateAs + " = " + currentProperty.GenerateAs + "\r\n");
                        }
                    }
                }
%>            Instance().Insert(entity)
        End Sub

        <% } // if (!currentEntity.GenerateAsReadOnly) %>

        'Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace;
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace+ "List";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            
        ''' <summary>
        ''' 
        ''' </summary>
        Public Function <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) As <%Response.Write(returnType);%>
            <% string param2 = PARAMETERS_VALUES_FOR_DATABASEQUERY(query);
            if (! String.IsNullOrEmpty(param2)) param2 = param2.Substring(1); %>
            Return Instance().<%Response.Write(query.QueryName);%>(<%Response.Write(param2);%>)
        End Function

        <%
        } 
        }
        %>


    End Class
End Namespace


Namespace Loaders<%Response.Write(currentEntity.FormattedNamespace);%>

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class <%Response.Write(currentEntity.GenerateAs);%>Loader(Of T As {<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, New})
        Inherits BaseLoader(Of T, <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As <%Response.Write(currentEntity.GenerateAs);%>Loader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As <%Response.Write(currentEntity.GenerateAs);%>Loader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New <%Response.Write(currentEntity.GenerateAs);%>Loader(Of T)
                Else
                    Dim inst As <%Response.Write(currentEntity.GenerateAs);%>Loader(Of T) = TryCast(HttpContext.Current.Items("<%Response.Write(parameters["RulesProjectName"]+"."+currentEntity.GenerateAs);%>LoaderSingleton"), <%Response.Write(currentEntity.GenerateAs);%>Loader(Of T))
                    If inst Is Nothing Then
                        inst = New <%Response.Write(currentEntity.GenerateAs);%>Loader(Of T)
                        HttpContext.Current.Items.Add("<%Response.Write(parameters["RulesProjectName"]+"."+currentEntity.GenerateAs);%>LoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            <%
            sReturn="";separator = "";
            sReturn="{\"";
            foreach (string fpk in currentEntity.PrimaryKeyFields)
            {
                sReturn+=separator+(currentEntity.FindInChildrenByName(fpk) as PropertyNode).GenerateAs;
                separator="\",\"";
            }
            sReturn+="\"}";
            %>
            Dim s() as String=<%Response.Write(sReturn);%>
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "<%Response.Write(currentEntity.Name);%>"
            End Get
        End Property

        <%if (currentEntity.GenerateAsReadOnly) { %>
        ' If this table is read only
        Protected Overrides Function IsReadOnly() As Boolean
            Return True
        End Function
        <%}%>

        <%if (currentEntity.GenerateAsCacheable) { %>
        ''' <summary>
        ''' If this table is cacheable
        ''' </summary>
        Protected Overrides Function IsCacheable() As Boolean
                Return True
        End Function
        <%}%>


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>)
            <% counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
              if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                   if (currentProperty.NativeLength == -1) {
                       Response.Write(String.Format("Dim l{2} As Integer = CInt(reader.GetBytes({2}, 0, Nothing, 0, 100000000))-1 : Dim _{0}(l{2}) As System.Byte : If Not reader.IsDBNull({2}) Then reader.GetBytes({2}, 0, _{0}, 0, l{2}+1)\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    } else {
                       Response.Write(String.Format("Dim _{0}({1}) As System.Byte: If Not reader.IsDBNull({2}) Then reader.GetBytes({2}, 0, _{0}, 0, {1})\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    }
                } else {
                if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {

                    string readerType = currentProperty.CLRType.Replace("System.","");
                    if (readerType == "Object") readerType = "Value";
                    if (currentProperty.NativeType == "real") readerType= "Float";
                    if (currentProperty.CLRType == "System.String"){
                        Response.Write("Dim _" + currentProperty.GenerateAs + " As String\r\n");
                        Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                        Response.Write("\t _" + currentProperty.GenerateAs + " = \"\"\r\n");
                        Response.Write("Else\r\n");
                        Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                        Response.Write("End If\r\n");
                    } else {
                        if (currentProperty.CLRType == "System.Object"){
                            Response.Write("Dim _" + currentProperty.GenerateAs + " As Object\r\n");
                            Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = Nothing\r\n");
                            Response.Write("Else\r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                            Response.Write("End If\r\n");
                        } else {
                            Response.Write("Dim _" + currentProperty.GenerateAs + " As System.Nullable(Of " + currentProperty.CLRType + ") \r\n");
                            Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = New System.Nullable(Of " + currentProperty.CLRType + ")\r\n");
                            Response.Write("Else\r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                            Response.Write("End If\r\n");
                        }
                    }
                }
                }
                counter++;
                }
            }%>
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object  = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            <%Response.Write(currentEntity.GenerateAs);%>.HydrateFields(<%separator = ""; counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                    Response.Write(separator + "_" + currentProperty.GenerateAs);
                } else {
                    if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {
                        Response.Write(separator + "_" + currentProperty.GenerateAs);
                    } else {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType = "Float";
                        Response.Write(separator + "reader.Get" + readerType + "(" + counter.ToString() + ")");
                    }        
                }
                separator = ", _\r\n";
                counter++;
            }}
            %>)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "<%Response.Write(parameters["SpPrefix"]);%>"
        End Function

        <%if (currentEntity.GenerateEntity) { %>

        <% foreach(PropertyNode currentProperty in currentEntity.Children) {
        if ((currentProperty.IsPrimaryKey || currentProperty.IsForeignKey) && !currentProperty.GenerateProperty) { %>
        Private Shared _<%Response.Write(currentProperty.GenerateAs);%>FieldInfo As FieldInfo = GetType(<%Response.Write(currentEntity.GenerateAs);%>Object).GetField("_<%Response.Write(currentProperty.GenerateAs);%>", BindingFlags.NonPublic Or BindingFlags.Instance)
        <%}}%>

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            <%Response.Write(SET_AGGREGATIONS(currentEntity));%>
            CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>).CompleteEntity(<%Response.Write(AGGREGATIONS_NAMES_FOR_IMAPPEABLE(currentEntity));%>)
        End Sub

        <% }  %>


        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%> by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>List by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        <% if (currentEntity.PrimaryKeyFields.Count > 0) { %>
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetOne", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        End Function
        <% } %>


        ' GetOne By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>) As t        
        Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>))
        End Function   
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Function

    <%}}%>


        'Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = "T";
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = "ObjectList(Of T)";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            
        ''' <summary>
        ''' 
        ''' </summary>
        Public Function <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) As <%Response.Write(returnType);%>
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            Return CType(MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>), <%Response.Write(returnType);%>)
            <% } else { 
            if (query.ReturnType == DatabaseQueryReturnType.DataReader) {%>
            Return MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>            
            Dim ds As DataSet = New DataSet()
            Dim tbl As String() = {"table"}
            MyBase.DataBaseHelper.FillDataSetByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            Return ds.Tables(0)
            <% } else { %>
            Return MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% }}} %>
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Function <%Response.Write(query.QueryName);%>(transaction As DbTransaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>) As <%Response.Write(returnType);%>
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            Return CType(MyBase.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>), <%Response.Write(returnType);%>)
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>
            Dim ds As DataSet = New DataSet()
            Dim tbl As String() = {"table"}
            MyBase.DataBaseHelper.FillDataSetByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            Return ds.Tables(0)
            <% } else { %>
            Return MyBase.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% }} %>
        End Function

        <%
        } 
        }
        %>


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace



<%
Response.SaveBuffer("\\Mappers\\Auto\\" + currentEntity.FullGenerateAs + "Mapper.Auto.vb");
}
}
%>
