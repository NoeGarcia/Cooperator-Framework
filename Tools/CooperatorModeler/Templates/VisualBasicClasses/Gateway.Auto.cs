<%
foreach (BaseTreeNode entityNode in Model.Children) {
    EntityNode currentEntity = (EntityNode)entityNode;
    if (currentEntity.GenerateObject && (currentEntity.PrimaryKeyFields.Count != 0 || currentEntity.GenerateAsReadOnly)) {%>
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version <%Response.Write(parameters["GeneratorVersion"]);%>
' Created: <%Response.Write(parameters["AutoFilesDateAndTime"]);%>
' This is a partial class file. The other one is <%Response.Write(currentEntity.GenerateAs);%>Gateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports <%Response.Write(parameters["RulesProjectName"]);%>.Objects<%Response.Write(currentEntity.FormattedNamespace);%>
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways<%Response.Write(currentEntity.FormattedNamespace);%>
        
    Friend Module <%Response.Write(currentEntity.GenerateAs);%>GatewayInstance
        Private _instance As <%Response.Write(currentEntity.GenerateAs);%>Gateway

		Public Function GetInstance() As <%Response.Write(currentEntity.GenerateAs);%>Gateway
			If _instance Is Nothing Then
				_instance = New <%Response.Write(currentEntity.GenerateAs);%>Gateway
            End If
	
			Return _instance
        End Function
    End Module








    Public Interface  I<%Response.Write(currentEntity.GenerateAs);%>Gateway 
        Inherits IBaseGateway(Of <%Response.Write(currentEntity.GenerateAs);%>Object, <%Response.Write(currentEntity.GenerateAs);%>ObjectList)

        <% string separator = ""; int counter = 0; bool isTheSame;%>

        Function GetOneBySQLQuery(sqlQueryText As String) As <%Response.Write(currentEntity.GenerateAs);%>Object 

        Function GetBySQLQuery(sqlQueryText As String) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList 

        Function GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) As <%Response.Write(currentEntity.GenerateAs);%>Object         


            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>Object by calling a Stored Procedure
        ''' </summary>
        Function GetOne(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + "ByVal " + pkField +" As "+ whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>) As <%Response.Write(currentEntity.GenerateAs);%>Object 
                        <%}
                    }
                }
            }%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>
        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        ''' </summary>
        Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + "ByVal " + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList 

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        ''' </summary>
        Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction, <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList 
    <%}}%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>
        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        ''' </summary>
        Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + "ByVal " + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList 

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        ''' </summary>
        Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList 
    <%}}%>

        <% if (!currentEntity.GenerateAsReadOnly) { %>
        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> 
        ''' </summary>
        Sub Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>)

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%>
        ''' </summary>
        Sub Delete(transaction As DbTransaction , <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>)

            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%>
        ''' </summary>
        Sub Delete(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + "ByVal " + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>)

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%>
        ''' </summary>
        Sub Delete(ByVal transaction As DbTransaction, <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable , <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + "ByVal " + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>)        
                        <%}
                    }
                }
            }%>



        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> By <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + "ByVal " + relField.Name + " As "+ propertyType );
            separator = ", ";
        }
        %>)

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> By <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction , <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + "ByVal "+ relField.Name+ " As " + propertyType );
            separator = ", ";
        }
        %>)

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> By <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable )

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> By <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction , ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable)

        <% } //if (!currentEntity.GenerateAsReadOnly) %>

    <%}}%>


        'Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + "Object";
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + "ObjectList";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            
        ''' <summary>
        ''' 
        ''' </summary>
        Function <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) As <%Response.Write(returnType);%>

        
        ''' <summary>
        ''' 
        ''' </summary>
        Function <%Response.Write(query.QueryName);%>(transaction As DbTransaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>) As <%Response.Write(returnType);%>

        <%
        }
        }
        %>


    End Interface 













    Public Partial Class <%Response.Write(currentEntity.GenerateAs);%>Gateway 
        Inherits BaseGateway(Of <%Response.Write(currentEntity.GenerateAs);%>Object, <%Response.Write(currentEntity.GenerateAs);%>ObjectList)
        Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway
        Implements IGenericGateway

        Friend Sub New()
        End Sub

        Public Shared Function Instance() As <%Response.Write(currentEntity.GenerateAs);%>Gateway
            Return <%Response.Write(currentEntity.GenerateAs);%>GateWayInstance.GetInstance()
        End Function

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "<%Response.Write(currentEntity.Name);%>"
            End Get
        End Property

        ''' <summary>
        ''' Return the <%Response.Write(currentEntity.GenerateAs);%>Gateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(<%Response.Write(currentEntity.GenerateAs);%>Gateway ).FullName
            End Get
        End Property


        <%if (currentEntity.GenerateAsReadOnly) { %>
        ''' <summary>
        ''' If this table is read only
        ''' </summary>
        Protected Overrides Function IsReadOnly() As Boolean
                Return True
        End Function
        <%}%>

        <%if (currentEntity.GenerateAsCacheable) { %>
        ''' <summary>
        ''' If this table is cacheable
        ''' </summary>
        Protected Overrides Function IsCacheable() As Boolean
                Return True
        End Function
        <%}%>


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>Object )
            <% counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
              if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                   if (currentProperty.NativeLength == -1) {
                       Response.Write(String.Format("Dim l{2} As Integer: If Not reader.IsDBNull({2}) Then l{2} = CInt(reader.GetBytes({2}, 0, Nothing, 0, 100000000))-1 \r\n Dim _{0}(l{2}) As System.Byte : If Not reader.IsDBNull({2}) Then reader.GetBytes({2}, 0, _{0}, 0, l{2}+1)\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    } else {
                       Response.Write(String.Format("Dim _{0}({1}) As System.Byte: If Not reader.IsDBNull({2}) Then _{0} = TryCast(reader.GetValue({2}), Byte())\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    }
                } else {
                if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {

                    string readerType = currentProperty.CLRType.Replace("System.","");
                    if (readerType == "Object") readerType = "Value";
                    if (currentProperty.NativeType == "real") readerType= "Float";
                    if (currentProperty.CLRType == "System.String"){
                        Response.Write("Dim _" + currentProperty.GenerateAs + " As String\r\n");
                        Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                        Response.Write("\t _" + currentProperty.GenerateAs + " = \"\"\r\n");
                        Response.Write("Else\r\n");
                        Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                        Response.Write("End If\r\n");
                    } else {
                        if (currentProperty.CLRType == "System.Object"){
                            Response.Write("Dim _" + currentProperty.GenerateAs + " As Object\r\n");
                            Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = Nothing\r\n");
                            Response.Write("Else\r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                            Response.Write("End If\r\n");
                        } else {
                            Response.Write("Dim _" + currentProperty.GenerateAs + " As System.Nullable(Of " + currentProperty.CLRType + ") \r\n");
                            Response.Write("If reader.IsDBNull(" + counter.ToString() + ") Then \r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = New System.Nullable(Of " + currentProperty.CLRType + ")\r\n");
                            Response.Write("Else\r\n");
                            Response.Write("\t _" + currentProperty.GenerateAs + " = reader.Get" + readerType + "(" + counter.ToString() + ")\r\n");
                            Response.Write("End If\r\n");
                        }
                    }
                }
                }
                counter++;
                }
            }%>
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object  = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            <%Response.Write(currentEntity.GenerateAs);%>.HydrateFields(<%separator = ""; counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                    Response.Write(separator + "_" + currentProperty.GenerateAs);
                } else {
                    if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {
                        Response.Write(separator + "_" + currentProperty.GenerateAs);
                    } else {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType = "Float";
                        Response.Write(separator + "reader.Get" + readerType + "(" + counter.ToString() + ")");
                    }        
                }
                separator = ", _\r\n";
                counter++;
            }}
            %>)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>Object) As Object()
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            Return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>Object) As Object()
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            Return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As <%Response.Write(currentEntity.GenerateAs);%>Object) As Object()
            Dim <%Response.Write(currentEntity.GenerateAs);%> As IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object = CType(entity, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)
            Return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As <%Response.Write(currentEntity.GenerateAs);%>Object, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "<%Response.Write(parameters["SpPrefix"]);%>"
        End Function


        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>Object by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As <%Response.Write(currentEntity.GenerateAs);%>Object Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.GetOneBySQLQuery
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.GetBySQLQuery
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>Object by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) As <%Response.Write(currentEntity.GenerateAs);%>Object Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.GetOne       
            Return MyBase.GetOne(New <%Response.Write(currentEntity.GenerateAs);%>Object(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>))
        End Function

            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>Object by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + "ByVal " + pkField +" As "+ whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>) As <%Response.Write(currentEntity.GenerateAs);%>Object Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.GetOne
        Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>))
        End Function
                        <%}
                    }
                }
            }%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>
        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + "ByVal " + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Function

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction, <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList  Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Function
    <%}}%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>
        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + "ByVal " + relField.Name + " As " + propertyType);
            separator = ", ";
        }
        %>) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList  Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Function

        ''' <summary>
        ''' Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) As <%Response.Write(currentEntity.GenerateAs);%>ObjectList Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Function
    <%}}%>

        <% if (!currentEntity.GenerateAsReadOnly) { %>
        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> 
        ''' </summary>
        Public Overloads Sub Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.Delete
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        End Sub

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%>
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "ByVal " + currentProperty.GenerateAs + " As " + currentProperty.CLRType);
                        separator = ", ";
                    }
                }
            %>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.Delete
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        End Sub

            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%>
        ''' </summary>
        Public Overloads Sub Delete(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + "ByVal " + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.Delete
        MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>))
        End Sub

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%>
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction, <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable , <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + "ByVal " + pkField + " As " + whatType);
                                separator = ", ";
                            }
                            count++;
                        }%>)     Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.Delete    
        MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>))
        End Sub
                        <%}
                    }
                }
            }%>



        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> By <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Public Overloads Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + "ByVal " + relField.Name + " As "+ propertyType );
            separator = ", ";
        }
        %>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Sub

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> By <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Public Overloads Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction , <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + "ByVal "+ relField.Name+ " As " + propertyType );
            separator = ", ";
        }
        %>) Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>)
        End Sub

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> By <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Public Overloads Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable ) Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Sub

        ''' <summary>
        ''' Delete <%Response.Write(currentEntity.GenerateAs);%> By <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        ''' </summary>
        Public Overloads Sub DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(ByVal transaction As DbTransaction , ByVal <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%> As IUniqueIdentifiable) Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier())
        End Sub

        <% } //if (!currentEntity.GenerateAsReadOnly) %>

    <%}}%>


        'Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + "Object";
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + "ObjectList";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            
        ''' <summary>
        ''' 
        ''' </summary>
        Public Function <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) As <%Response.Write(returnType);%> Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.<%Response.Write(query.QueryName);%>
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            Return CType(MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>), <%Response.Write(returnType);%>)
            <% } else { 
            if (query.ReturnType == DatabaseQueryReturnType.DataReader) {%>
            Return MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>            
            Dim ds As DataSet = New DataSet()
            Dim tbl As String() = {"table"}
            MyBase.DataBaseHelper.FillDataSetByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            Return ds.Tables(0)
            <% } else { %>
            Return MyBase.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% }}} %>
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Function <%Response.Write(query.QueryName);%>(transaction As DbTransaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>) As <%Response.Write(returnType);%> Implements I<%Response.Write(currentEntity.GenerateAs);%>Gateway.<%Response.Write(query.QueryName);%>
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            Return CType(MyBase.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>), <%Response.Write(returnType);%>)
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>
            Dim ds As DataSet = New DataSet()
            Dim tbl As String() = {"table"}
            MyBase.DataBaseHelper.FillDataSetByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            Return ds.Tables(0)
            <% } else { %>
            Return MyBase.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>)
            <% }} %>
        End Function

        <%
        }
        }
        %>



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace



<%
Response.SaveBuffer("\\Gateways\\Auto\\" + currentEntity.FullGenerateAs + "Gateway.Auto.vb");
}
}
%>
