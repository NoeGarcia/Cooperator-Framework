<%
foreach (BaseTreeNode entityNode in Model.Children) {
    EntityNode currentEntity = (EntityNode)entityNode;
    if (currentEntity.GenerateObject && (currentEntity.PrimaryKeyFields.Count != 0 || currentEntity.GenerateAsReadOnly)) {%>
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version <%Response.Write(parameters["GeneratorVersion"]);%>
// Created: <%Response.Write(parameters["AutoFilesDateAndTime"]);%>
// This is a partial class file. The other one is <%Response.Write(currentEntity.GenerateAs);%>Mapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using <%Response.Write(parameters["RulesProjectName"]);%>.Entities<%Response.Write(currentEntity.FormattedNamespace);%>;
using <%Response.Write(parameters["RulesProjectName"]);%>.Objects<%Response.Write(currentEntity.FormattedNamespace);%>;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace <%Response.Write(parameters["RulesProjectName"]);%>.Mappers<%Response.Write(currentEntity.FormattedNamespace);%>
{

    <% string ObjectWordOrSpace = (currentEntity.GenerateEntity) ? "" : "Object";
    string EntitiesOrObjects = (currentEntity.GenerateEntity) ? "Entities" : "Objects"; %>
   
    internal static class <%Response.Write(currentEntity.GenerateAs);%>MapperInstance
    {
        private static <%Response.Write(currentEntity.GenerateAs);%>Mapper _instance;

		public static <%Response.Write(currentEntity.GenerateAs);%>Mapper GetInstance()
        {
			if (_instance == null) 
				_instance = new <%Response.Write(currentEntity.GenerateAs);%>Mapper();
	
			return _instance;
        }
    }


    <% string sReturn=""; string separator = ""; int counter = 0; bool isTheSame = false; %>


    /// <summary>
    /// 
    /// </summary>
    public interface I<%Response.Write(currentEntity.GenerateAs);%>Mapper : IBaseGateway<<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List>
    {

        //<%Response.Write(currentEntity.GenerateAs);%>Mapper Instance();


        string[] GetPKPropertiesNames();

        Type GetMappingType();


        <% if (currentEntity.GenerateEntity) { %>


        # region CRUD Operations
        <% bool haveCollections = false;
        foreach(PropertyNode currentProperty in currentEntity.Children)
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation ))&& currentProperty.GenerateProperty) haveCollections = true;
        if (haveCollections) { %>

        new void Insert(<%Response.Write(currentEntity.GenerateAs);%> entity);

        new void Insert(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%> entity);

        new void Delete(<%Response.Write(currentEntity.GenerateAs);%> entity);

        new void Delete(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%> entity);

        new void Save(<%Response.Write(currentEntity.GenerateAs);%> entity);

        new void Save(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%> entity);

        new void Update(<%Response.Write(currentEntity.GenerateAs);%>List entityList);

        new void Update(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%>List entityList);

        void Update<T>(ObjectList<T> entityList) where T : IObject, new();

        void Update<T>(DbTransaction transaction, ObjectList<T> entityList) where T : IObject, new();

       <%}%>

        # endregion

        void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity);

        <% } /* end if */ %>  


        <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> GetOneBySQLQuery(string sqlQueryText);

        <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBySQLQuery(string sqlQueryText);


        <% if(currentEntity.PrimaryKeyFields.Count > 0) { %>
        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
        <% } // if(currentEntity.PrimaryKeyFields.Count > 0) %>

        // GetOne By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> GetOne(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>);
                        <%}
                    }
                }
            }%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>);

        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);

    <%}}%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>);

        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);

    <%}}%>

        <% if (!currentEntity.GenerateAsReadOnly) { %>
        /// <summary>
        /// 
        /// </summary>
        void Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);

        /// <summary>
        /// 
        /// </summary>
        void Delete(DbTransaction transaction, <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);


        // Delete By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// 
        /// </summary>
        void Delete(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>);

        /// <summary>
        /// 
        /// </summary>
        void Delete(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>);
                        <%}
                    }
                }
            }%>



        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// 
        /// </summary>
        void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>);

        /// <summary>
        /// 
        /// </summary>
        void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>);


        /// <summary>
        /// 
        /// </summary>
        void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);

        /// <summary>
        /// 
        /// </summary>
        void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);

        <% } // if (!currentEntity.GenerateAsReadOnly) %>


    <%}}%>


        //Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace;
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace + "List";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            

        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>);

        
        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(DbTransaction transaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>); 


        <%
        }
        }
        %>


    }










    /// <summary>
    /// 
    /// </summary>
    public partial class <%Response.Write(currentEntity.GenerateAs);%>Mapper : BaseGateway<<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List>, I<%Response.Write(currentEntity.GenerateAs);%>Mapper, IGenericGateway
    {

        internal <%Response.Write(currentEntity.GenerateAs);%>Mapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static <%Response.Write(currentEntity.GenerateAs);%>Mapper Instance() {
            return <%Response.Write(currentEntity.GenerateAs);%>MapperInstance.GetInstance();
}

        <% if (parameters["GenerateCheckForToken"] == "TRUE") {%>
        protected override byte[] GetAssemblyToken()
        {
            return Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken();
        }
        <%}%>

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            <%
            sReturn="";separator = "";
            sReturn="{\"";
            foreach (string fpk in currentEntity.PrimaryKeyFields)
            {
                sReturn+=separator+(currentEntity.FindInChildrenByName(fpk) as PropertyNode).GenerateAs;
                separator="\",\"";
            }
            sReturn+="\"}";
            %>
            string[] s =<%Response.Write(sReturn);%>;
            return s;
        }

        /// <summary>
        ///
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>);
        }

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "<%Response.Write(currentEntity.Name);%>"; }
        }

        /// <summary>
        /// Return the <%Response.Write(currentEntity.GenerateAs);%>Mapper type FullName
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(<%Response.Write(currentEntity.GenerateAs);%>Mapper).FullName;}
        }


        <%if (currentEntity.GenerateAsReadOnly) { %>
        /// <summary>
        /// If this table is read only
        /// </summary>
        protected override bool IsReadOnly()
        {
            return true;
        }
        <%}%>

        <%if (currentEntity.GenerateAsCacheable) { %>
        /// <summary>
        /// If this table is cacheable
        /// </summary>
        protected override bool IsCacheable()
        {
            return true;
        }
        <%}%>

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> entity)
        {
            <% counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
                if (currentProperty.CLRType == "System.Byte[]") {
                   if (currentProperty.NativeLength == -1) {
                       Response.Write(String.Format("int l{2} = 0; if (!reader.IsDBNull({2})) l{2} = (int) reader.GetBytes({2}, 0, null, 0, 100000000); \r\n System.Byte[] _{0} = new System.Byte[l{2}]; if (!reader.IsDBNull({2})) reader.GetBytes({2}, 0, _{0}, 0, l{2});\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    } else {
                        Response.Write(String.Format("System.Byte[] _{0} = new System.Byte[{1}]; if (!reader.IsDBNull({2})) _{0} = reader.GetValue({2}) as System.Byte[];\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    }
                }            
                counter++;
            }%>
            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            <%Response.Write(currentEntity.GenerateAs);%>.HydrateFields(
            <%separator = ""; counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                    Response.Write(separator + "_" + currentProperty.GenerateAs);
                } else {
                    if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType= "Float";
                        if (currentProperty.CLRType == "System.String")
                            Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? \"\" : reader.Get" + readerType + "(" + counter.ToString() + ")");
                        else
                        {
                            if (currentProperty.CLRType == "System.Object")
                                Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? null : reader.Get" + readerType + "(" + counter.ToString() + ")");
                            else
                                Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? new System.Nullable<" + currentProperty.CLRType + ">() : reader.Get" + readerType + "(" + counter.ToString() + ")");
                        }
                    } else {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType = "Float";
                        Response.Write(separator + "reader.Get" + readerType + "(" + counter.ToString() + ")");
                    }        
                }
                separator = ",\r\n";
                counter++;
            }}
            %>);
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> entity)
        {

            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> entity)
        {

            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> entity)
        {

            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "<%Response.Write(parameters["SpPrefix"]);%>";
        }


        <% if (currentEntity.GenerateEntity) { %>


        <% foreach(PropertyNode currentProperty in currentEntity.Children) {
        if ((currentProperty.IsPrimaryKey || currentProperty.IsForeignKey) && !currentProperty.GenerateProperty) { %>
        private static FieldInfo _<%Response.Write(currentProperty.GenerateAs);%>FieldInfo = typeof(<%Response.Write(currentEntity.GenerateAs);%>Object).GetField("_<%Response.Write(currentProperty.GenerateAs);%>", BindingFlags.NonPublic | BindingFlags.Instance);
        <%}}%>

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(<%Response.Write(currentEntity.GenerateAs);%> entity)
        {
            <%Response.Write(SET_AGGREGATIONS(currentEntity));%>
            ((IMappeable<%Response.Write(currentEntity.GenerateAs);%>)entity).CompleteEntity(<%Response.Write(AGGREGATIONS_NAMES_FOR_IMAPPEABLE(currentEntity));%>);
        }


        # region CRUD Operations
        <% bool haveCollections = false;
        foreach(PropertyNode currentProperty in currentEntity.Children)
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation ))&& currentProperty.GenerateProperty) haveCollections = true;
        if (haveCollections) { %>
        /// <summary>
        /// 
        /// </summary>
        public override void Insert(<%Response.Write(currentEntity.GenerateAs);%> entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Insert(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Insert(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%> entity)
        {
            base.Insert(transaction, entity);
            ((IMappeable<%Response.Write(currentEntity.GenerateAs);%>)entity).SetFKValuesForChilds(entity);
            <%foreach(PropertyNode currentProperty in currentEntity.Children) {
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation))&& currentProperty.GenerateProperty) {
                string mapperOrGateway = (currentProperty.CLRType.EndsWith("ObjectList") || currentProperty.CLRType.EndsWith("Object")) ? "Gateway" : "Mapper"; 
                string collectionName = DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName);
                string methodName = (currentProperty.IsCollection) ? "Append" : "Insert";
                if (currentProperty.GenerateAsLazyLoad) {%>
            if (!((IMappeable<%Response.Write(currentEntity.GenerateAs);%>)entity).Is<%Response.Write(currentProperty.GenerateAs);%>Null()) {
                <%} else {%>
            if (entity.<%Response.Write(currentProperty.GenerateAs);%> != null) {
                <%}%>
                <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().<%Response.Write(methodName);%>(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>);
            }
            <%}}%>            
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Delete(<%Response.Write(currentEntity.GenerateAs);%> entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Delete(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public override void Delete(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%> entity)
        {
            DeleteChildren(transaction, entity);
            base.Delete(transaction, entity);
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Save(<%Response.Write(currentEntity.GenerateAs);%> entity)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Save(transaction, entity);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Save(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%> entity)
        {
            base.Save(transaction, entity);
            ((IMappeable<%Response.Write(currentEntity.GenerateAs);%>)entity).SetFKValuesForChilds(entity);
            <%foreach(PropertyNode currentProperty in currentEntity.Children) {
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation))&& currentProperty.GenerateProperty) {
                string mapperOrGateway = (currentProperty.CLRType.EndsWith("ObjectList") || currentProperty.CLRType.EndsWith("Object")) ? "Gateway" : "Mapper"; 
                string collectionName = DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName);
                if (currentProperty.GenerateAsLazyLoad) {%>
            if (!((IMappeable<%Response.Write(currentEntity.GenerateAs);%>)entity).Is<%Response.Write(currentProperty.GenerateAs);%>Null()) {
                <%} else {%>
            if (entity.<%Response.Write(currentProperty.GenerateAs);%> != null) {
                <%}%>
                <%if (currentProperty.IsCollection) { %>
                <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().Update(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>);
                <%} else { %>
                if (ObjectStateHelper.IsNew(entity.<%Response.Write(currentProperty.GenerateAs);%>))
                    <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().Insert(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>);
                else
                {
                    if (ObjectStateHelper.IsDeleted(entity.<%Response.Write(currentProperty.GenerateAs);%>))
                        <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().Delete(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>);
                    else
                        <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().Save(transaction, entity.<%Response.Write(currentProperty.GenerateAs);%>);
                }                
                <%}%>
            }
            <%}}%>            
        }


        /// <summary>
        /// 
        /// </summary>
        public override void Update(<%Response.Write(currentEntity.GenerateAs);%>List entityList)
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public override void Update(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%>List entityList)
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {


                IObjectList<<%Response.Write(currentEntity.GenerateAs);%>> deletedItems = ((IObjectList<<%Response.Write(currentEntity.GenerateAs);%>>)entityList).DeletedItems();
                foreach (<%Response.Write(currentEntity.GenerateAs);%> entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (<%Response.Write(currentEntity.GenerateAs);%> entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<<%Response.Write(currentEntity.GenerateAs);%>>)entityList).ResetDeletedItems();


                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(ObjectList<T> entityList)  where T : IObject, new()
        {
            DbTransaction transaction = base.DataBaseHelper.GetAndBeginTransaction();
            DbConnection conn = transaction.Connection;
            try
            {
                Update<T>(transaction, entityList);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally 
            {
                conn.Close();
                transaction.Dispose();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        public void Update<T>(DbTransaction transaction, ObjectList<T> entityList)   where T : IObject, new()
        {

            bool localTransaction = false;
            DbConnection conn = null;
            if (transaction == null)
            {
                localTransaction = true;
                transaction = base.DataBaseHelper.GetAndBeginTransaction();
                conn = transaction.Connection;
            }

            try
            {

                IObjectList<T> deletedItems = ((IObjectList<T>)entityList).DeletedItems();
                foreach (T entity in deletedItems)
                {
                    if (ObjectStateHelper.IsDeleted(entity))
                    {
                        Delete(transaction, entity as <%Response.Write(currentEntity.GenerateAs);%>);
                        ObjectStateHelper.SetAsDeleted(entity);
                    }
                }

                foreach (T entity in entityList)
                {
                    if (ObjectStateHelper.IsNew(entity))
                        Insert(transaction, entity as <%Response.Write(currentEntity.GenerateAs);%>);
                    else {
                        if (ObjectStateHelper.IsDeleted(entity)) {
                            Delete(transaction, entity as <%Response.Write(currentEntity.GenerateAs);%>);
                            ObjectStateHelper.SetAsDeleted(entity);
                        } else {
                            Save(transaction, entity as <%Response.Write(currentEntity.GenerateAs);%>);
                        }
                    }
                }            
                for (int i = entityList.Count - 1; i >= 0; i--)
                    if (ObjectStateHelper.IsDeleted(entityList[i]))
                        entityList.RemoveAt(i);

                ((IObjectList<T>)entityList).ResetDeletedItems();

                if (localTransaction)
                {
                    transaction.Commit();
                }

            }
            catch (Exception)
            {
                if (localTransaction)
                {
                    transaction.Rollback();
                }
                throw;
            }
            finally
            {
                if (localTransaction)
                {
                    conn.Close();
                    transaction.Dispose();
                }
            }

        }


       <%}%>

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
            <%bool isHaveChildDefined = false;
            foreach(PropertyNode currentProperty in currentEntity.Children) {
            if ((currentProperty.IsCollection || (currentProperty.IsEntity && currentProperty.IsOneToOneRelation))&& currentProperty.GenerateProperty) {

                string mapperOrGateway = (currentProperty.CLRType.EndsWith("ObjectList") || currentProperty.CLRType.EndsWith("Object")) ? "Gateway" : "Mapper"; 
                string collectionName = DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName);
                string GetByXXXX = GET_GETBYXXXXX_FOR_RELATEDTABLE(currentProperty.RelatedTableName, currentProperty.RelatedFields, currentProperty.Parent.Parent);
                string deleteMethodName = "DeleteBy" + GetByXXXX; 
                string getMethodName = "GetBy" + GetByXXXX;                         

                if (mapperOrGateway.StartsWith("Mapper")) {
                if (!isHaveChildDefined) {
                    isHaveChildDefined = true;
                    Response.Write("\r\nbool haveChild = false;");
                }
                else
                    Response.Write("\r\nhaveChild = false;");
                %>                                                
                foreach (IUniqueIdentifiable child in Gateways.<%Response.Write(collectionName);%>Gateway.Instance().<%Response.Write(getMethodName);%>(transaction, entity))
                {
                    <%Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().DeleteChildren(transaction, child);
                    haveChild = true;
                }
                <%} 
                if (mapperOrGateway.StartsWith("Mapper")) { %>
                if (haveChild) 
                <%}
                   Response.Write(mapperOrGateway);%>s.<%Response.Write(collectionName);%><%Response.Write(mapperOrGateway);%>.Instance().<%Response.Write(deleteMethodName);%>(transaction, entity);
            <%}}%>            
        }


        <% } /* end if */ %>  


        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> by execute a SQL Query Text
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List by execute a SQL Query Text
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        <% if(currentEntity.PrimaryKeyFields.Count > 0) { %>
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        {
            return base.GetOne(new <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>));
        }
        <% } // if(currentEntity.PrimaryKeyFields.Count > 0) %>

        // GetOne By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> GetOne(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>));
        }   
                        <%}
                    }
                }
            }%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

    <%}}%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

    <%}}%>

        <% if (!currentEntity.GenerateAsReadOnly) { %>
        /// <summary>
        /// 
        /// </summary>
        public void Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
        }


        // Delete By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// 
        /// </summary>
        public void Delete(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>));
        }   
        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>));
        }   
                        <%}
                    }
                }
            }%>



        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

        <% } // if (!currentEntity.GenerateAsReadOnly) %>


    <%}}%>


        //Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace;
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace + "List";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            

        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) {
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            return (<%Response.Write(returnType);%>) base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else { 
            if (query.ReturnType == DatabaseQueryReturnType.DataReader) {%>
            return base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>            
            DataSet ds = new DataSet();
            string[] tbl  = {"table"};
            base.DataBaseHelper.FillDataSetByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            return ds.Tables[0];
            <% } else { %>
            return base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% }}} %>
        }

        
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(DbTransaction transaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>) {
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            return (<%Response.Write(returnType);%>) base.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>
            DataSet ds = new DataSet();
            string[] tbl = {"table"};
            base.DataBaseHelper.FillDataSetByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            return ds.Tables[0];
            <% } else { %>
            return base.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% }} %>
        }


        <%
        }
        }
        %>


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}














namespace <%Response.Write(parameters["RulesProjectName"]);%>.Wrappers<%Response.Write(currentEntity.FormattedNamespace);%>
{
    /// <summary>
    /// 
    /// </summary>
    public class <%Response.Write(currentEntity.GenerateAs);%>MapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(parameters["RulesProjectName"]);%>.Mappers.<%Response.Write(currentEntity.FullGenerateAs);%>Mapper Instance()
        {
            return <%Response.Write(parameters["RulesProjectName"]);%>.Mappers.<%Response.Write(currentEntity.FullGenerateAs);%>Mapper.Instance(); 
        }
        
        <% if(currentEntity.PrimaryKeyFields.Count > 0) { %>
        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>Entity by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%> GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " " + currentProperty.GenerateAs );
                        separator = ", ";
                    }}
            %>) {
            return Instance().GetOne( <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
        }
        <% } // if(currentEntity.PrimaryKeyFields.Count > 0) %>

        // GetBy Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>  by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%> GetOne(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
            return Instance().GetOne(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>);
        }   
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            return Instance().GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>List by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%>List GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            return Instance().GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);
        }

    <%}}%>

        /// <summary>
        /// GetAll <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> 
        /// </summary>
        public <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%>List GetAll(){  
            return Instance().GetAll();
        }

        <% if (!currentEntity.GenerateAsReadOnly) { %>
        <% if (currentEntity.GenerateEntity) {%>

        /// <summary>
        /// Delete children for <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, <%Response.Write(currentEntity.GenerateAs);%> entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        <% } %>

            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        public void Delete(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
            Instance().Delete(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>);
        }   
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            Instance().DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            Instance().DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);
        }

    <%}}%>
        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> 
        /// </summary>
        public void Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " " + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>){
            Instance().Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
        }

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> 
        /// </summary>
        public void Delete(<%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%> entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save <%Response.Write(currentEntity.GenerateAs +ObjectWordOrSpace);%>  
        /// </summary>
        public void Save(<%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%> entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert <%Response.Write(currentEntity.GenerateAs +ObjectWordOrSpace);%> 
        /// </summary>
        public void Insert(<%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%> entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// Save <%Response.Write(currentEntity.GenerateAs);%> 
        /// </summary>
        public void Save(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey){
                        if (currentProperty.NativeType != "None" &&  currentProperty.CLRType != "System.Byte[]"){
                            Response.Write(separator + currentProperty.CLRType + " " + currentProperty.GenerateAs);
                            separator = ", ";
                        }
                    }
                }
            %>){
            <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%> entity = Instance().GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: <% 
                counter = 0;
                separator = "";
                foreach (PropertyNode currentProperty in currentEntity.Children) {
                    if (currentProperty.IsPrimaryKey) {
                       Response.Write(separator + "{" + counter.ToString() + "} = {" + (counter+1).ToString() + "}");
                       separator = ", ";
                       counter++;
                       counter++;
                    }            
                }%>", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + "\"" + currentProperty.GenerateAs + "\", " + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>));
<%                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.GenerateProperty){
                        if (!currentProperty.IsPrimaryKey && currentProperty.NativeType != "None" &&  currentProperty.CLRType != "System.Byte[]" && !currentProperty.GenerateAsReadOnly)
                            {
                            Response.Write("            entity." + currentProperty.GenerateAs + " = " + currentProperty.GenerateAs + ";\r\n");
                        }
                    }
                }
                
%>            Instance().Save(entity);
        }

        /// <summary>
        /// Insert <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>
        /// </summary>
        public void Insert(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.GenerateProperty){
                        if (currentProperty.NativeType != "None" &&  currentProperty.CLRType != "System.Byte[]" && !currentProperty.GenerateAsReadOnly){
                            Response.Write(separator + currentProperty.CLRType + " " + currentProperty.GenerateAs);
                            separator = ", ";
                        }
                    }
                }
        %>){
            <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%> entity = new <%Response.Write(EntitiesOrObjects + "." + currentEntity.FullGenerateAs + ObjectWordOrSpace);%>();
<%
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.GenerateProperty){
                        if (!currentProperty.IsAutoGenerated && currentProperty.NativeType != "None" &&  currentProperty.CLRType != "System.Byte[]"  && !currentProperty.GenerateAsReadOnly){
                            Response.Write("            entity." + currentProperty.GenerateAs + " = " + currentProperty.GenerateAs + ";\r\n");
                        }
                    }
                }
%>            Instance().Insert(entity);
        }

        <% } // if (!currentEntity.GenerateAsReadOnly) %>


        //Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace;
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + ObjectWordOrSpace + "List";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) {
            <% string param2 = PARAMETERS_VALUES_FOR_DATABASEQUERY(query);
            if (! String.IsNullOrEmpty(param2)) param2 = param2.Substring(1); %>
                return Instance().<%Response.Write(query.QueryName);%>(<%Response.Write(param2);%>);
        }


        <%
        }
        }
        %>


    }
}





namespace <%Response.Write(parameters["RulesProjectName"]);%>.Loaders<%Response.Write(currentEntity.FormattedNamespace);%>
{

    /// <summary>
    /// 
    /// </summary>
    public partial class <%Response.Write(currentEntity.GenerateAs);%>Loader<T> : BaseLoader< T, <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, ObjectList<T>>, IGenericGateway where T : <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>, new()
    {

        #region "Singleton"

        static <%Response.Write(currentEntity.GenerateAs);%>Loader<T> _instance;

        private <%Response.Write(currentEntity.GenerateAs);%>Loader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static <%Response.Write(currentEntity.GenerateAs);%>Loader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new <%Response.Write(currentEntity.GenerateAs);%>Loader<T>();
                else {
                    <%Response.Write(currentEntity.GenerateAs);%>Loader<T> inst = HttpContext.Current.Items["<%Response.Write(parameters["RulesProjectName"]+"."+currentEntity.GenerateAs);%>LoaderSingleton"] as <%Response.Write(currentEntity.GenerateAs);%>Loader<T>;
                    if (inst == null) {
                        inst = new <%Response.Write(currentEntity.GenerateAs);%>Loader<T>();
                        HttpContext.Current.Items.Add("<%Response.Write(parameters["RulesProjectName"]+"."+currentEntity.GenerateAs);%>LoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            <%
            sReturn="";separator = "";
            sReturn="{\"";
            foreach (string fpk in currentEntity.PrimaryKeyFields)
            {
                sReturn+=separator+(currentEntity.FindInChildrenByName(fpk) as PropertyNode).GenerateAs;
                separator="\",\"";
            }
            sReturn+="\"}";
            %>
            string[] s =<%Response.Write(sReturn);%>;
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(<%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%>);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "<%Response.Write(currentEntity.Name);%>"; }
        }

        <%if (currentEntity.GenerateAsReadOnly) { %>
        /// <summary>
        /// If this table is read only
        /// </summary>
        protected override bool IsReadOnly()
        {
            return true;
        }
        <%}%>

        <%if (currentEntity.GenerateAsCacheable) { %>
        /// <summary>
        /// If this table is cacheable
        /// </summary>
        protected override bool IsCacheable()
        {
            return true;
        }
        <%}%>

        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, <%Response.Write(currentEntity.GenerateAs + ObjectWordOrSpace);%> entity)
        {
            <% counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
                if (currentProperty.CLRType == "System.Byte[]") {
                   if (currentProperty.NativeLength == -1) {
                       Response.Write(String.Format("int l{2} = (int) reader.GetBytes({2}, 0, null, 0, 100000000); System.Byte[] _{0} = new System.Byte[l{2}]; if (!reader.IsDBNull({2})) reader.GetBytes({2}, 0, _{0}, 0, l{2});\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    } else {
                        Response.Write(String.Format("System.Byte[] _{0} = new System.Byte[{1}]; if (!reader.IsDBNull({2})) reader.GetBytes({2}, 0, _{0}, 0, {1});\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    }
                }            
                counter++;
            }%>
            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            <%Response.Write(currentEntity.GenerateAs);%>.HydrateFields(
            <%separator = ""; counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                    Response.Write(separator + "_" + currentProperty.GenerateAs);
                } else {
                    if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType= "Float";
                        if (currentProperty.CLRType == "System.String")
                            Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? \"\" : reader.Get" + readerType + "(" + counter.ToString() + ")");
                        else
                        {
                            if (currentProperty.CLRType == "System.Object")
                                Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? null : reader.Get" + readerType + "(" + counter.ToString() + ")");
                            else
                                Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? new System.Nullable<" + currentProperty.CLRType + ">() : reader.Get" + readerType + "(" + counter.ToString() + ")");
                        }
                    } else {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType = "Float";
                        Response.Write(separator + "reader.Get" + readerType + "(" + counter.ToString() + ")");
                    }        
                }
                separator = ",\r\n";
                counter++;
            }}
            %>);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "<%Response.Write(parameters["SpPrefix"]);%>";
        }


        <% if (currentEntity.GenerateEntity) { %>
    

        <% foreach(PropertyNode currentProperty in currentEntity.Children) {
        if ((currentProperty.IsPrimaryKey || currentProperty.IsForeignKey) && !currentProperty.GenerateProperty) { %>
        private static FieldInfo _<%Response.Write(currentProperty.GenerateAs);%>FieldInfo = typeof(<%Response.Write(currentEntity.GenerateAs);%>Object).GetField("_<%Response.Write(currentProperty.GenerateAs);%>", BindingFlags.NonPublic | BindingFlags.Instance);
        <%}}%>

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            <%Response.Write(SET_AGGREGATIONS(currentEntity));%>
            ((IMappeable<%Response.Write(currentEntity.GenerateAs);%>)entity).CompleteEntity(<%Response.Write(AGGREGATIONS_NAMES_FOR_IMAPPEABLE(currentEntity));%>);
        }


        <% } %>



        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%> by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>List by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        <% if (currentEntity.PrimaryKeyFields.Count > 0) { %>
        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetOne", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
        }
        <% } %>


        // GetOne By Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// 
        /// </summary>
        public T GetOne(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>));
        }   
                        <%}
                    }
                }
            }%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

    <%}}%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

    <%}}%>

        //Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {
            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = "T";
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = "ObjectList<T>";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) {
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            return (<%Response.Write(returnType);%>) base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else { 
            if (query.ReturnType == DatabaseQueryReturnType.DataReader) {%>
            return base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>            
            DataSet ds = new DataSet();
            string[] tbl  = {"table"};
            base.DataBaseHelper.FillDataSetByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            return ds.Tables[0];
            <% } else { %>
            return base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% }}} %>
        }

        
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(DbTransaction transaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>) {
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            return (<%Response.Write(returnType);%>) base.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>
            DataSet ds = new DataSet();
            string[] tbl = {"table"};
            base.DataBaseHelper.FillDataSetByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            return ds.Tables[0];
            <% } else { %>
            return base.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% }} %>
        }

        <%
        }
        }
        %>



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}




<%
Response.SaveBuffer("\\Mappers\\Auto\\" + currentEntity.FullGenerateAs + "Mapper.Auto.cs");
}
}
%>
