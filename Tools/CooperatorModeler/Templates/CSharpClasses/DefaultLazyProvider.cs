//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version <%Response.Write(parameters["GeneratorVersion"]);%>
// Created: <%Response.Write(parameters["AutoFilesDateAndTime"]);%>
// You can edit this file as your wish.
//------------------------------------------------------------------------------

using System;
using System.Data.Common;
using Cooperator.Framework.Data;
using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using <%Response.Write(parameters["RulesProjectName"]);%>.Entities;
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection((EntityNode) Model)){
        Response.Write("using " + parameters["RulesProjectName"] + ".Entities." + ns + ";\r\n");
   }
%>
using <%Response.Write(parameters["RulesProjectName"]);%>.Objects;
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection((EntityNode) Model)){
        Response.Write("using " + parameters["RulesProjectName"] + ".Objects." + ns + ";\r\n");
   }
%>
using <%Response.Write(parameters["RulesProjectName"]);%>.Gateways;
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection((EntityNode) Model)){
        Response.Write("using " + parameters["RulesProjectName"] + ".Gateways." + ns + ";\r\n");
   }
%>
using <%Response.Write(parameters["RulesProjectName"]);%>.Mappers;
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection((EntityNode) Model)){
        Response.Write("using " + parameters["RulesProjectName"] + ".Mappers." + ns + ";\r\n");
   }
%>
using System.Collections.Generic;

namespace <%Response.Write(parameters["RulesProjectName"]);%>.LazyProviders
{
    /// <summary>
    /// 
    /// </summary>
    public class DefaultLazyProvider: ILazyProvider
    {
        private static Object thisLock = new Object();
        private static Dictionary<string, IBaseGateway> _mappersCache;
        internal static Dictionary<string, IBaseGateway> MappersCache
        {
            get
            {
                lock (thisLock)
                {
                    if (DefaultLazyProvider._mappersCache == null)
                    {
                        DefaultLazyProvider._mappersCache = new Dictionary<string, IBaseGateway>();
                        <%foreach (BaseTreeNode entityNode in Model.Children) {
                        EntityNode currentEntity = (EntityNode)entityNode;
                        if (currentEntity.GenerateObject && currentEntity.GenerateEntity && currentEntity.PrimaryKeyFields.Count != 0) {%>
                        DefaultLazyProvider._mappersCache.Add("<%Response.Write(parameters["RulesProjectName"]);%>.Entities.<%Response.Write(currentEntity.FullGenerateAs);%>", <%Response.Write(parameters["RulesProjectName"]);%>.Mappers.<%Response.Write(currentEntity.FullGenerateAs);%>Mapper.Instance());
                        <% } 
                        if (currentEntity.GenerateObject && currentEntity.PrimaryKeyFields.Count != 0) {%>
                        DefaultLazyProvider._mappersCache.Add("<%Response.Write(parameters["RulesProjectName"]);%>.Objects.<%Response.Write(currentEntity.FullGenerateAs);%>Object", <%Response.Write(parameters["RulesProjectName"]);%>.Gateways.<%Response.Write(currentEntity.FullGenerateAs);%>Gateway.Instance());
                    <%}}%>
                    }
                }
                return DefaultLazyProvider._mappersCache;
            }
        }    


        /// <summary>
        /// Get associated entity for this entity
        /// </summary>
        public IUniqueIdentifiable GetEntity(System.Type child, IUniqueIdentifiable identifier)
        {
            IGenericGateway genericGateway = (IGenericGateway)DefaultLazyProvider.MappersCache[child.FullName];
            return genericGateway.GetOne(identifier) as IUniqueIdentifiable;
        }

        /// <summary>
        /// Get collection based in the parent entity
        /// </summary>
        public object GetList(System.Type child, IUniqueIdentifiable parent)
        {
            IGenericGateway genericGateway = (IGenericGateway)DefaultLazyProvider.MappersCache[child.FullName];
            return genericGateway.GetByParent(parent);
        }
    }
}


namespace <%Response.Write(parameters["RulesProjectName"]);%>.MapperRepositoy
{

    public static class Respository
    {
        private static readonly DefaultRepository Repo = new DefaultRepository();


        /// <summary>
        /// Este repositorio debe usarse en produccion, ya que devuelve los mappers propiamente dichos.
        /// </summary>
        public static DefaultRepository GetDefault()
        {
            return Repo;
        }

        /// <summary>
        /// Obtiene un nuevo repositorio (para usar con test), deben cargarse los mappers usando el metodo Add.
        /// </summary>
        public static TestRepository GetTestRepository()
        {
            return new TestRepository();
        }

    }


    public class DefaultRepository : IMapperRepository
    {

        /// <summary>
        /// Obtiene un mapper o gateway por medio de su interface
        /// </summary>
        public T Get<T>() where T : IBaseGateway
        {
            foreach (var i in <%Response.Write(parameters["RulesProjectName"]);%>.LazyProviders.DefaultLazyProvider.MappersCache.Values)
            {
                if (typeof(T).IsAssignableFrom(i.GetType()))
                    return (T)i;
            }
            return default(T);
        }

        public DbTransaction GetAndBeginTransaction(BaseRule rule)
        {
            return rule.DataBaseHelper.GetAndBeginTransaction();
        }

        public void CommitTransaction(DbTransaction tr)
        {
            tr.Commit();
        }

        public void RollBackTransaction(DbTransaction tr)
        {
            tr.Rollback();
        }

        public void DisposeTransaction(DbTransaction tr)
        {
            tr.Dispose();
        }

        public DbConnection GetConnection(DbTransaction tran)
        {
            return tran.Connection;
        }

        public void CloseConnection(DbConnection conn)
        {
            conn.Close();
        }
    }



    public class TestRepository : IMapperRepository
    {
        private Dictionary<string, IBaseGateway> _mappersCache;

        public TestRepository()
        {
            _mappersCache = new Dictionary<string, IBaseGateway>();
        }

        /// <summary>
        /// Obtiene un mapper o gateway por su interface
        /// </summary>
        public T Get<T>() where T : IBaseGateway
        {
            foreach (var i in _mappersCache.Values)
            {
                if (typeof(T).IsAssignableFrom(i.GetType()))
                    return (T)i;
            }
            return default(T);
        }

        public DbTransaction GetAndBeginTransaction(BaseRule rule)
        {
            return null;
        }

        public void CommitTransaction(DbTransaction tr)
        {            
        }

        public void RollBackTransaction(DbTransaction tr)
        {
        }

        public void DisposeTransaction(DbTransaction tr)
        {
        }

        public DbConnection GetConnection(DbTransaction tran)
        {
            return null;
        }

        public void CloseConnection(DbConnection conn)
        {            
        }

        /// <summary>
        /// Permite injectar un mapper. Pensado para poder agregar un mock de un mapper, para hacer test
        /// </summary>
        public void Add<T>(T mapper) where T : IBaseGateway
        {
            string typeName = typeof(T).FullName;
            if (_mappersCache.ContainsKey(typeName))
                _mappersCache.Remove(typeName);

            _mappersCache.Add(typeName, (IBaseGateway)mapper);
        }

        /// <summary>
        /// Limpia la cache de repositorios. Solo debe llamarse a este metodo en un ambiente de test, injectando los mocks de los mappers con el metodo Add
        /// </summary>
        public void Clear()
        {
            _mappersCache = new Dictionary<string, IBaseGateway>();
        }

    }


    public interface IMapperRepository
    {
        T Get<T>() where T : IBaseGateway;

        DbTransaction GetAndBeginTransaction(BaseRule rule);
        void CommitTransaction(DbTransaction tr);
        void RollBackTransaction(DbTransaction tr);
        void DisposeTransaction(DbTransaction tr);

        DbConnection GetConnection(DbTransaction tran);
        void CloseConnection(DbConnection conn);
    }

}



<%Response.SaveBuffer("\\LazyProviders\\DefaultLazyProvider.cs");%>

