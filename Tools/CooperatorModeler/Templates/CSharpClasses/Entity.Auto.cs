<%
foreach (BaseTreeNode entityNode in Model.Children) {
    EntityNode currentEntity = (EntityNode)entityNode;
    if (currentEntity.GenerateEntity && currentEntity.GenerateObject && (currentEntity.PrimaryKeyFields.Count != 0 || currentEntity.GenerateAsReadOnly)) {%>
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version <%Response.Write(parameters["GeneratorVersion"]);%>
// Created: <%Response.Write(parameters["AutoFilesDateAndTime"]);%>
// This is a partial class file. The other one is <%Response.Write(currentEntity.GenerateAs);%>Entity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using <%Response.Write(parameters["RulesProjectName"]);%>.Objects;
<% foreach (string ns in DomainTreeHelper.GetNamespaceCollection(currentEntity.Parent)){
        Response.Write("using " + parameters["RulesProjectName"] + ".Objects." + ns + ";\r\n");
        if (!currentEntity.FormattedNamespace.Contains(ns)){
            Response.Write("using " + parameters["RulesProjectName"] + ".Entities." + ns + ";\r\n");
        }
   }
%>

using System;
using System.Net;
using System.Runtime.Serialization;
using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;

namespace <%Response.Write(parameters["RulesProjectName"]);%>.Entities<%Response.Write(currentEntity.FormattedNamespace);%>
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract()]
    public partial class <%Response.Write(currentEntity.GenerateAs);%> : Objects.<%Response.Write(currentEntity.FullGenerateAs);%>Object, IMappeable<%Response.Write(currentEntity.GenerateAs);%>, IEquatable<<%Response.Write(currentEntity.GenerateAs);%>>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>()
            :base()
        {
            <%foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.GenerateProperty && (currentProperty.IsCollection || currentProperty.IsEntity) && !currentProperty.IsOneToOneRelation) {
                bool allowNull = true;
                foreach (RelatedField relField in currentProperty.RelatedFields)
                    if (!DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.Parent.Name, relField.Name).IsNullable) allowNull = false;

                    string entitiesOrObjects = "";
                    if (currentProperty.CLRType.EndsWith("Object") || currentProperty.CLRType.EndsWith("ObjectList")) entitiesOrObjects = "Objects.";
                    else entitiesOrObjects = "Entities.";

                    if (!allowNull) {
                    Response.Write("if (_" + currentProperty.GenerateAs + " == null) _" + currentProperty.GenerateAs + " = new " + entitiesOrObjects + currentProperty.CLRType + "();\r\n");
                }
            }}%>
        }

        <% if (PK_PARAMS_FOR_OBJECTS_CTOR(currentEntity).Length > 0) { %>
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>(<%Response.Write(PK_PARAMS_FOR_OBJECTS_CTOR(currentEntity));%>)
            : base()
        {
<%Response.Write(PK_SET_VALUES_FOR_OBJECTS_CTOR(currentEntity));%>
            <%foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.GenerateProperty && (currentProperty.IsCollection || currentProperty.IsEntity) && !currentProperty.IsOneToOneRelation) {
                bool allowNull = true;
                foreach (RelatedField relField in currentProperty.RelatedFields)
                    if (!DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.Parent.Name, relField.Name).IsNullable) allowNull = false;

                    string entitiesOrObjects = "";
                    if (currentProperty.CLRType.EndsWith("Object") || currentProperty.CLRType.EndsWith("ObjectList")) entitiesOrObjects = "Objects.";
                    else entitiesOrObjects = "Entities.";
        
                    if (!allowNull) {
                    Response.Write("if (_" + currentProperty.GenerateAs + " == null) _" + currentProperty.GenerateAs + " = new " + entitiesOrObjects + currentProperty.CLRType + "();\r\n");
                }
            }}%>
            Initialized();
        }
        <% } %>

        <% int noPkCounter = 0;
        foreach (PropertyNode currentProperty in currentEntity.Children)
            if (currentProperty.NativeType != "None" && currentProperty.GenerateProperty && !currentProperty.IsPrimaryKey && !currentProperty.IsForeignKey && !currentProperty.IsRowVersion)
                noPkCounter++;
        if (noPkCounter > 0) { %>

        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>(<%Response.Write(ALL_FIELDS_PARAMS_FOR_OBJECTS_CTOR(currentEntity));%>)
            : base()
        {
<%Response.Write(ALL_FIELDS_SET_VALUES_FOR_OBJECTS_CTOR(currentEntity));%>
            <%foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.GenerateProperty && (currentProperty.IsCollection || currentProperty.IsEntity) && !currentProperty.IsOneToOneRelation) {
                bool allowNull = true;
                foreach (RelatedField relField in currentProperty.RelatedFields)
                    if (!DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.Parent.Name, relField.Name).IsNullable) allowNull = false;

                string entitiesOrObjects = "";
                if (currentProperty.CLRType.EndsWith("Object") || currentProperty.CLRType.EndsWith("ObjectList")) entitiesOrObjects = "Objects.";
                else entitiesOrObjects = "Entities.";

                if (!allowNull) {
                    Response.Write("if (_" + currentProperty.GenerateAs + " == null) _" + currentProperty.GenerateAs + " = new " + entitiesOrObjects + currentProperty.CLRType + "();\r\n");
                }
            }}%>
            Initialized();
        }
        <%}%>
        #endregion

        #region "Fields"

        <%foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType == "None" && currentProperty.GenerateProperty) {
                string entitiesOrObjects = "";
                if (currentProperty.CLRType.EndsWith("Object") || currentProperty.CLRType.EndsWith("ObjectList")) entitiesOrObjects = "Objects.";
                else entitiesOrObjects = "Entities.";
                Response.Write(@"/// <summary>" + "\r\n");
                Response.Write(@"/// " + "\r\n");
                Response.Write(@"/// </summary>" + "\r\n");
                Response.Write(@"[DataMember()]" + "\r\n");
                Response.Write("protected " + entitiesOrObjects + currentProperty.CLRType + " _" + currentProperty.GenerateAs + ";\r\n");
            }            
        }%>
        #endregion

        #region "Properties"
        <%foreach (PropertyNode currentProperty in currentEntity.Children) {
            string entitiesOrObjects = "";
            if (currentProperty.CLRType.EndsWith("Object") || currentProperty.CLRType.EndsWith("ObjectList")) entitiesOrObjects = "Objects.";
            else entitiesOrObjects = "Entities.";
            if (currentProperty.NativeType == "None" && currentProperty.GenerateProperty ) { 
            if (currentProperty.GenerateAsLazyLoad && currentProperty.IsEntity) 
                 Response.Write("\r\nbool _" + currentProperty.GenerateAs + "Fetched;"); %>

        /// <summary>
        /// 
        /// </summary>
        [DataMember()]
        public virtual <%Response.Write(entitiesOrObjects + currentProperty.CLRType + " " + currentProperty.GenerateAs);%>
        {
            get
            {
                <%if (currentProperty.GenerateAsLazyLoad) {
                    if (currentProperty.IsEntity)
                    {
                        string param = ""; string sep2 = "";
                        string nulleables = "";
                        string sep3 = "";
                        foreach (RelatedField relField in currentProperty.RelatedFields)
                        {
                            foreach (PropertyNode currentProperty2 in currentEntity.Children) {
                                if (currentProperty2.Name == relField.Name) {
                                    if (currentProperty2.IsNullable) {
                                        if (currentProperty2.CLRType != "System.String") {
                                            nulleables += sep3 + "this." + relField.GenerateAsForName + ".HasValue";
                                            param += sep2 + "this." + relField.GenerateAsForName + ".Value";
                                        } else {
                                            nulleables += sep3 + "! string.IsNullOrEmpty(this." + relField.GenerateAsForName + ")";
                                            param += sep2 + "this." + relField.GenerateAsForName;            
                                        }
                                        sep2 = ", ";
                                        sep3 = " && ";

                                    } else {
                                        param += sep2 + "this." + relField.GenerateAsForName;
                                        sep2 = ", ";                                                                                
                                        sep3 = " && ";
                                    }
                                }
                            }                            
                        }
                        if (!string.IsNullOrEmpty(nulleables)) nulleables = " && " + nulleables;
                        string lazyProvider;
                        string relatedEntity = entitiesOrObjects + currentProperty.CLRType + " _" + currentProperty.GenerateAs + "Temp = new " + entitiesOrObjects + currentProperty.CLRType + "(" + param + "); \r\n";
                        if  (currentProperty.GenerateAsType == CollectionTypeEnum.Object)
                            lazyProvider = "ILazyProvider lazyProvider = LazyProviderFactory.Get(\""+parameters["DataProjectName"]+"\", \""+parameters["RulesProjectName"]+".LazyProviders.DefaultLazyProvider\");\r\n _{1} = lazyProvider.GetEntity(typeof({0}Object), _" + currentProperty.GenerateAs + "Temp) as {0}Object;";
                        else
                            lazyProvider = "ILazyProvider lazyProvider = LazyProviderFactory.Get(\""+parameters["DataProjectName"]+"\", \""+parameters["RulesProjectName"]+".LazyProviders.DefaultLazyProvider\");\r\n _{1} = lazyProvider.GetEntity(typeof({0}), _" + currentProperty.GenerateAs + "Temp) as {0};";
                        string entityName = entitiesOrObjects + DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName);
                        string askForFetched = "";
                        if (currentProperty.GenerateAsLazyLoad && currentProperty.IsEntity) 
                             askForFetched = " && ! _" + currentProperty.GenerateAs + "Fetched "; 
                        Response.Write("if (_" + currentProperty.GenerateAs + "== null " + nulleables + askForFetched +") {\r\n");
                        if (currentProperty.GenerateAsLazyLoad && currentProperty.IsEntity) 
                             Response.Write("_" + currentProperty.GenerateAs + "Fetched = true;\r\n"); 
                        Response.Write(relatedEntity);
                        Response.Write(string.Format(lazyProvider, entityName, currentProperty.GenerateAs));
                        Response.Write("\r\n}\r\n");
                    }
                    else
                    {
                        string lazyProvider;
                        if  (currentProperty.GenerateAsType == CollectionTypeEnum.EntityList)
                            lazyProvider = "ILazyProvider lazyProvider = LazyProviderFactory.Get(\""+parameters["DataProjectName"]+"\", \""+parameters["RulesProjectName"]+".LazyProviders.DefaultLazyProvider\");\r\n _{1} = lazyProvider.GetList(typeof({0}), this) as {0}List;";
                        else
                            lazyProvider = "ILazyProvider lazyProvider = LazyProviderFactory.Get(\""+parameters["DataProjectName"]+"\", \""+parameters["RulesProjectName"]+".LazyProviders.DefaultLazyProvider\");\r\n _{1} = lazyProvider.GetList(typeof({0}Object), this) as {0}ObjectList;";
                        string entityName = currentProperty.Parent.GenerateAs;
                        string collectionName = DomainTreeHelper.GetFullGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName);
                        Response.Write("if (_" +  currentProperty.GenerateAs + "== null) {\r\n  \t\t " + string.Format(lazyProvider, entitiesOrObjects + collectionName, currentProperty.GenerateAs) + "\r\n }");
                    }
                }%>
                return _<%Response.Write(currentProperty.GenerateAs);%>;
            }
            set
            {
                base.PropertyModified();
                _<%Response.Write(currentProperty.GenerateAs);%> = value;
                <%if (currentProperty.IsEntity && !currentProperty.IsOneToOneRelation) {
                    foreach (RelatedField relField in currentProperty.RelatedFields){
                        Response.Write("if (value != null) {\r\n");
                        Response.Write("   _" + relField.GenerateAsForName + " = value." + relField.GenerateAsForRelatedName + ";\r\n");
                        foreach (PropertyNode prop2 in currentEntity.Children)
                        {
                            if (prop2.GenerateProperty && prop2.IsDescriptionField && currentProperty.RelatedTableName == prop2.RelatedTableName && currentProperty.RelatedFields[0].ToString() == prop2.RelatedFields[0].ToString())
                            {
                                Response.Write("if ((object) value." + DomainTreeHelper.GetDescriptionFieldNameForEntity(currentEntity.Parent,prop2.RelatedTableName) + " != null) \r\n" );
                                Response.Write("    _" + prop2.GenerateAs + " = value." + DomainTreeHelper.GetDescriptionFieldNameForEntity(currentEntity.Parent,prop2.RelatedTableName) + ".ToString();\r\n" );
                                Response.Write("else\r\n");
                                Response.Write("    _" + prop2.GenerateAs + " = \"\"; \r\n" );
                            }
                        }
                        Response.Write("\r\n} else {\r\n");
                        if (DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.Parent.Name, relField.Name).IsNullable) {
                            Response.Write("   _" + relField.GenerateAsForName + " = null;\r\n");
                        } else {
                            if (DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.RelatedTableName, relField.RelatedName).CLRType == "System.String")
                                Response.Write("   _" + relField.GenerateAsForName + " = \"\";\r\n");
                            else if (DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.RelatedTableName, relField.RelatedName).CLRType == "System.Guid")
                                Response.Write("   _" + relField.GenerateAsForName + " = System.Guid.Empty;\r\n");
                            else 
                                Response.Write("   _" + relField.GenerateAsForName + " = " + DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.RelatedTableName, relField.RelatedName).CLRType.ToString() + ".MinValue;\r\n");
                        }
                        foreach (PropertyNode prop2 in currentEntity.Children)
                        {
                            if (prop2.GenerateProperty && prop2.IsDescriptionField && currentProperty.RelatedTableName == prop2.RelatedTableName && currentProperty.RelatedFields[0].ToString() == prop2.RelatedFields[0].ToString())
                                Response.Write("_" + prop2.GenerateAs + " = \"\";" );
                        }
                        Response.Write("\r\n}\r\n");
                    }
                }%>
            <%if (currentProperty.IsEntity) Response.Write("CorrectDescriptionField(value);\r\n");%>
            }
        }
        <%}}%>
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new <%Response.Write(currentEntity.GenerateAs);%> OriginalValue()
        {
            return (<%Response.Write(currentEntity.GenerateAs);%>)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            <%Response.Write(currentEntity.GenerateAs);%> newObject;            
            <%foreach(PropertyNode currentProperty in currentEntity.Children) {
                string objectsOrEntities = (currentProperty.CLRType.EndsWith("ObjectList")) ? "Objects" : "Entities";
                objectsOrEntities = parameters["RulesProjectName"] + "." + objectsOrEntities + ".";
                if (currentProperty.IsCollection && currentProperty.GenerateProperty) 
                    Response.Write(objectsOrEntities + currentProperty.CLRType + " new" + currentProperty.GenerateAs + ";\r\n");
            } %>

            newObject = (<%Response.Write(currentEntity.GenerateAs);%>)this.MemberwiseClone();
            // Entities
            <%foreach(PropertyNode currentProperty in currentEntity.Children) {
                string entitiesOrObjects = "";
                if (currentProperty.CLRType.EndsWith("Object") || currentProperty.CLRType.EndsWith("ObjectList")) entitiesOrObjects = "Objects.";
                else entitiesOrObjects = "Entities.";
                if (currentProperty.IsEntity  && currentProperty.GenerateProperty) { %>             
            if (this._<%Response.Write(currentProperty.GenerateAs);%> != null)
            {
                newObject._<%Response.Write(currentProperty.GenerateAs);%> = (<%Response.Write(entitiesOrObjects + currentProperty.CLRType);%>)((ICloneable)this._<%Response.Write(currentProperty.GenerateAs);%>).Clone();
            }
            <%}}%>
            // Colections
            <%foreach(PropertyNode currentProperty in currentEntity.Children) {
                if (currentProperty.IsCollection && currentProperty.GenerateProperty) {%>
            if (this._<%Response.Write(currentProperty.GenerateAs);%> != null)
            {
                <% string objectsOrEntities = (currentProperty.CLRType.EndsWith("ObjectList")) ? "Objects" : "Entities"; 
                objectsOrEntities = parameters["RulesProjectName"] + "." + objectsOrEntities + "."; %>
                new<%Response.Write(currentProperty.GenerateAs);%> = new <%Response.Write(objectsOrEntities + currentProperty.CLRType);%>();
                <%string rowType = (currentProperty.CLRType.EndsWith("List")) ? currentProperty.CLRType.Substring(0, currentProperty.CLRType.Length-4) : currentProperty.CLRType.Substring(0, currentProperty.CLRType.Length-3); %>
                foreach (<%Response.Write(objectsOrEntities + rowType);%> row in this._<%Response.Write(currentProperty.GenerateAs);%>)
                { 
                    new<%Response.Write(currentProperty.GenerateAs);%>.Add((<%Response.Write(objectsOrEntities + rowType);%>)((ICloneable) row).Clone());
                }
                newObject._<%Response.Write(currentProperty.GenerateAs);%> = new<%Response.Write(currentProperty.GenerateAs);%>;

				// Clonamos los items deleteados
				foreach (var item in ((IObjectList<<%Response.Write(objectsOrEntities + rowType);%>>) this.<%Response.Write(currentProperty.GenerateAs);%>).DeletedItems())
				{
					((IObjectList<<%Response.Write(objectsOrEntities + rowType);%>>) newObject.<%Response.Write(currentProperty.GenerateAs);%>).DeletedItems().Add(
						(<%Response.Write(objectsOrEntities + rowType);%>) ((ICloneable)item).Clone()
						);
				}

            }
            <%}}%>
            // OriginalValue
            <%Response.Write(currentEntity.GenerateAs);%> newOriginalValue;
            if (base.InternalOriginalValue != null)
            {
                newOriginalValue = (<%Response.Write(currentEntity.GenerateAs);%>)this.OriginalValue().MemberwiseClone();
                // Entities
                <%foreach(PropertyNode currentProperty in currentEntity.Children) {
                string entitiesOrObjects = "";
                if (currentProperty.CLRType.EndsWith("Object") || currentProperty.CLRType.EndsWith("ObjectList")) entitiesOrObjects = "Objects.";
                else entitiesOrObjects = "Entities.";
                if (currentProperty.IsEntity  && currentProperty.GenerateProperty) { %>             
                if (this.OriginalValue()._<%Response.Write(currentProperty.GenerateAs);%> != null)
                {
                    newOriginalValue._<%Response.Write(currentProperty.GenerateAs);%> = (<%Response.Write(entitiesOrObjects + currentProperty.CLRType);%>)((ICloneable)this.OriginalValue()._<%Response.Write(currentProperty.GenerateAs);%>).Clone();
                }
                <%}}%>
                // Colections
                <%foreach(PropertyNode currentProperty in currentEntity.Children) {
                if (currentProperty.IsCollection && currentProperty.GenerateProperty) {%>
                if (this.OriginalValue()._<%Response.Write(currentProperty.GenerateAs);%> != null)
                {
                    <% string objectsOrEntities = (currentProperty.CLRType.EndsWith("ObjectList")) ? "Objects" : "Entities";
                    objectsOrEntities = parameters["RulesProjectName"] + "." + objectsOrEntities + "."; %>
                    new<%Response.Write(currentProperty.GenerateAs);%> = new <%Response.Write(objectsOrEntities + currentProperty.CLRType);%>();
                    <%string rowType = (currentProperty.CLRType.EndsWith("List")) ? currentProperty.CLRType.Substring(0, currentProperty.CLRType.Length-4) : currentProperty.CLRType.Substring(0, currentProperty.CLRType.Length-3); %>
                    foreach (<%Response.Write(objectsOrEntities + rowType);%> row in this.OriginalValue()._<%Response.Write(currentProperty.GenerateAs);%>)
                    {
                        new<%Response.Write(currentProperty.GenerateAs);%>.Add((<%Response.Write(objectsOrEntities + rowType);%>)((ICloneable)row).Clone());
                    }
                    newOriginalValue._<%Response.Write(currentProperty.GenerateAs);%> = new<%Response.Write(currentProperty.GenerateAs);%>;
                }                
                <%}}%>            
                newObject.InternalOriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeable<%Response.Write(currentEntity.GenerateAs);%>.CompleteEntity(<%Response.Write(AGGREGATIONS_AND_TYPES_FOR_IMAPPEABLE(currentEntity));%>)
        {
        <%string sep ="";
        foreach (PropertyNode currentProperty in currentEntity.Children)
        {
            if (currentProperty.NativeType == "None" && currentProperty.GenerateProperty)
            {
                Response.Write(sep + "_" +currentProperty.GenerateAs + " = " + currentProperty.GenerateAs + ";");
                sep = "\r\n";
            }
        }%>
        }
        <%foreach (PropertyNode currentProperty in currentEntity.Children) {
        if (currentProperty.NativeType == "None" && currentProperty.GenerateProperty && currentProperty.GenerateAsLazyLoad) { %>
        bool IMappeable<%Response.Write(currentEntity.GenerateAs);%>.Is<%Response.Write(currentProperty.GenerateAs);%>Null()
        {
            return (_<%Response.Write(currentProperty.GenerateAs);%> == null);
        }
        <%}}%>

        /// <summary>
        /// 
        /// </summary>
        void IMappeable<%Response.Write(currentEntity.GenerateAs);%>.SetFKValuesForChilds(<%Response.Write(currentEntity.GenerateAs);%> entity)
        {
        <%foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.GenerateProperty && currentProperty.IsCollection) { %>
            if (_<%Response.Write(currentProperty.GenerateAs);%> != null)
            {
                <%string itemtype = "";
                if (currentProperty.GenerateAsType == CollectionTypeEnum.ObjectList) itemtype = currentProperty.CLRType.Replace("ObjectList", "Object");
                if (currentProperty.GenerateAsType == CollectionTypeEnum.EntityList) itemtype = currentProperty.CLRType.Replace("List", "");
                string objectsOrEntities = (currentProperty.CLRType.EndsWith("ObjectList")) ? "Objects" : "Entities";
                objectsOrEntities = parameters["RulesProjectName"] + "." + objectsOrEntities + ".";
                %>
                foreach (<%Response.Write(objectsOrEntities + itemtype);%> item in _<%Response.Write(currentProperty.GenerateAs);%>)
                {
                        <%foreach (RelatedField relField in currentProperty.RelatedFields) {%>
                        <%PropertyNode relatedProperty = DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.RelatedTableName, relField.RelatedName); %>
                        <%string nullvalue = (relatedProperty.IsNullable && relatedProperty.CLRType != "System.String") ? ".Value " : ""; %>
                        <%string nullcheck = (relatedProperty.IsNullable && relatedProperty.CLRType != "System.String") ? "! item."+ relField.RelatedName + ".HasValue || " : ""; %>
                    if (<%Response.Write(nullcheck);%> item.<%Response.Write(relField.GenerateAsForRelatedName + nullvalue);%> != entity.<%Response.Write(relField.GenerateAsForName);%>) item.<%Response.Write(relField.GenerateAsForRelatedName);%> = entity.<%Response.Write(relField.GenerateAsForName);%>;
                    <%}%>
                }
            }
            <%}
            if (currentProperty.GenerateProperty && currentProperty.IsOneToOneRelation) { %>
            if (_<%Response.Write(currentProperty.GenerateAs);%> != null)
            {
                <%foreach (RelatedField relField in currentProperty.RelatedFields) {%>
                <%PropertyNode relatedProperty = DomainTreeHelper.FindPropertyInTree(currentProperty.Parent.Parent, currentProperty.RelatedTableName, relField.RelatedName); %>
                <%string nullvalue = (relatedProperty.IsNullable && relatedProperty.CLRType != "System.String") ? ".Value " : ""; %>
                <%string nullcheck = (relatedProperty.IsNullable && relatedProperty.CLRType != "System.String") ? "! _"+ currentProperty.GenerateAs + "." + relField.RelatedName + ".HasValue || " : ""; %>
                if (<%Response.Write(nullcheck);%> _<%Response.Write(currentProperty.GenerateAs);%>.<%Response.Write(relatedProperty.GenerateAs + nullvalue);%> != entity.<%Response.Write(relField.Name);%>) _<%Response.Write(currentProperty.GenerateAs);%>.<%Response.Write(relatedProperty.GenerateAs);%> = entity.<%Response.Write(relField.Name);%>;
                <%}%>
            }                           
        <%}}%>        
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(<%Response.Write(currentEntity.GenerateAs);%> other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeable<%Response.Write(currentEntity.GenerateAs);%>
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(<%Response.Write(AGGREGATIONS_AND_TYPES_FOR_IMAPPEABLE(currentEntity));%>);
        <%foreach (PropertyNode currentProperty in currentEntity.Children) {
        if (currentProperty.NativeType == "None" && currentProperty.GenerateProperty && currentProperty.GenerateAsLazyLoad) { %>
        /// <summary>
        /// 
        /// </summary>
        bool Is<%Response.Write(currentProperty.GenerateAs);%>Null();
        <%}}%>
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(<%Response.Write(currentEntity.GenerateAs);%> entity);
    }

        /// <summary>
        /// 
        /// </summary>
        [CollectionDataContract()]
        public partial class <%Response.Write(currentEntity.GenerateAs);%>List : ObjectList<<%Response.Write(currentEntity.GenerateAs);%>>
        {
        }
}
namespace <%Response.Write(parameters["RulesProjectName"]);%>.Views<%Response.Write(currentEntity.FormattedNamespace);%>
{
        /// <summary>
        /// 
        /// </summary>
        [CollectionDataContract()]
        public partial class <%Response.Write(currentEntity.GenerateAs);%>ListView
            : ObjectListView<Entities.<%Response.Write(currentEntity.FullGenerateAs);%>>
        {
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>ListView(Entities.<%Response.Write(currentEntity.FullGenerateAs);%>List list): base(list)
        {
        }
    }
}

<%
Response.SaveBuffer("\\Entities\\Auto\\" + currentEntity.FullGenerateAs + ".Auto.cs");
}
}
%>
