<%
foreach (BaseTreeNode entityNode in Model.Children) {
    EntityNode currentEntity = (EntityNode)entityNode;
    if (currentEntity.GenerateObject && (currentEntity.PrimaryKeyFields.Count != 0 || currentEntity.GenerateAsReadOnly)) {%>
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version <%Response.Write(parameters["GeneratorVersion"]);%>
// Created: <%Response.Write(parameters["AutoFilesDateAndTime"]);%>
// This is a partial class file. The other one is <%Response.Write(currentEntity.GenerateAs);%>Gateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using <%Response.Write(parameters["RulesProjectName"]);%>.Objects<%Response.Write(currentEntity.FormattedNamespace);%>;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;

<% if (!string.IsNullOrEmpty(currentEntity.Namespace)) { %>
namespace <%Response.Write(parameters["RulesProjectName"]);%>.Entities<%Response.Write(currentEntity.FormattedNamespace);%>
{
    // Only for ensure the namespace generation.
}
<%}%>

namespace <%Response.Write(parameters["RulesProjectName"]);%>.Gateways<%Response.Write(currentEntity.FormattedNamespace);%>
{
  
    internal static class <%Response.Write(currentEntity.GenerateAs);%>GatewayInstance
    {
        private static <%Response.Write(currentEntity.GenerateAs);%>Gateway _instance;

		public static <%Response.Write(currentEntity.GenerateAs);%>Gateway GetInstance()
        {
			if (_instance == null) 
				_instance = new <%Response.Write(currentEntity.GenerateAs);%>Gateway();
	
			return _instance;
        }
    }


    public interface I<%Response.Write(currentEntity.GenerateAs);%>Gateway : IBaseGateway<<%Response.Write(currentEntity.GenerateAs);%>Object, <%Response.Write(currentEntity.GenerateAs);%>ObjectList>
    {

        <% string separator = ""; int counter = 0; bool isTheSame;%>

        //<%Response.Write(currentEntity.GenerateAs);%>Gateway Instance();            

        <%Response.Write(currentEntity.GenerateAs);%>Object GetOneBySQLQuery(string sqlQueryText);

        <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBySQLQuery(string sqlQueryText);


        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>Object by calling a Stored Procedure
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs);%>Object GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                    {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);


        // GetBy Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>Object by calling a Stored Procedure
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs);%>Object GetOne(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>);
                        <%}
                    }
                }
            }%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction,<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>);


        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);

    <%}}%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>);

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        /// </summary>
        <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);

    <%}}%>

        <% if (!currentEntity.GenerateAsReadOnly) { %>
        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        void Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        void Delete(DbTransaction transaction, <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);

            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        void Delete(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>);

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        void Delete(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>);
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>);

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>);


        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>);

        <% } //if (!currentEntity.GenerateAsReadOnly) %>


    <%}}%>


        //Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {

            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + "Object";
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + "ObjectList";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            

        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>);

        
        /// <summary>
        /// 
        /// </summary>
        <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(DbTransaction transaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>);


        <%
        }
        }    
        %>

    }











    /// <summary>
    /// 
    /// </summary>
    public partial class <%Response.Write(currentEntity.GenerateAs);%>Gateway : BaseGateway<<%Response.Write(currentEntity.GenerateAs);%>Object, <%Response.Write(currentEntity.GenerateAs);%>ObjectList>, I<%Response.Write(currentEntity.GenerateAs);%>Gateway, IGenericGateway
    {

        internal <%Response.Write(currentEntity.GenerateAs);%>Gateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static <%Response.Write(currentEntity.GenerateAs);%>Gateway Instance() {
            return <%Response.Write(currentEntity.GenerateAs);%>GatewayInstance.GetInstance();
        }


        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "<%Response.Write(currentEntity.Name);%>"; }
        }


        <% if ( parameters["GenerateCheckForToken"] == "TRUE") {%>
        protected override byte[] GetAssemblyToken()
        {
            return Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken();
        }
        <%}%>

        /// <summary>
        /// Return the <%Response.Write(currentEntity.GenerateAs);%>Gateway type FullName
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(<%Response.Write(currentEntity.GenerateAs);%>Gateway).FullName;}
        }


        <%if (currentEntity.GenerateAsReadOnly) { %>
        /// <summary>
        /// If this table is read only
        /// </summary>
        protected override bool IsReadOnly()
        {
            return true;
        }
        <%}%>

        <%if (currentEntity.GenerateAsCacheable) { %>
        /// <summary>
        /// If this table is cacheable
        /// </summary>
        protected override bool IsCacheable()
        {
            return true;
        }
        <%}%>


        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, <%Response.Write(currentEntity.GenerateAs);%>Object entity)
        {
            <% counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
                if (currentProperty.CLRType == "System.Byte[]") {
                   if (currentProperty.NativeLength == -1) {
                       Response.Write(String.Format("int l{2} = 0; if (!reader.IsDBNull({2})) l{2} = (int) reader.GetBytes({2}, 0, null, 0, 100000000); \r\n System.Byte[] _{0} = new System.Byte[l{2}]; if (!reader.IsDBNull({2})) reader.GetBytes({2}, 0, _{0}, 0, l{2});\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    } else {
                        Response.Write(String.Format("System.Byte[] _{0} = new System.Byte[{1}]; if (!reader.IsDBNull({2})) _{0} = reader.GetValue({2}) as System.Byte[];\r\n", currentProperty.GenerateAs, currentProperty.NativeLength, counter));
                    }
                }            
                counter++;
            }%>
            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            <%Response.Write(currentEntity.GenerateAs);%>.HydrateFields(
            <%separator = ""; counter = 0;
            foreach (PropertyNode currentProperty in currentEntity.Children) {
            if (currentProperty.NativeType != "None" && (currentProperty.GenerateProperty || currentProperty.IsPrimaryKey || currentProperty.IsForeignKey)) {
                if (currentProperty.CLRType == "System.Byte[]") {
                    Response.Write(separator + "_" + currentProperty.GenerateAs);
                } else {
                    if (currentProperty.IsNullable || currentProperty.IsDescriptionField) {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType= "Float";
                        if (currentProperty.CLRType == "System.String")
                            Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? \"\" : reader.Get" + readerType + "(" + counter.ToString() + ")");
                        else
                        {
                            if (currentProperty.CLRType == "System.Object")
                                Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? null : reader.Get" + readerType + "(" + counter.ToString() + ")");
                            else
                                Response.Write(separator + "(reader.IsDBNull(" + counter.ToString() + ")) ? new System.Nullable<" + currentProperty.CLRType + ">() : reader.Get" + readerType + "(" + counter.ToString() + ")");
                        }
                    } else {
                        string readerType = currentProperty.CLRType.Replace("System.","");
                        if (readerType == "Object") readerType = "Value";
                        if (currentProperty.NativeType == "real") readerType = "Float";
                        Response.Write(separator + "reader.Get" + readerType + "(" + counter.ToString() + ")");
                    }        
                }
                separator = ",\r\n";
                counter++;
            }}
            %>);
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(<%Response.Write(currentEntity.GenerateAs);%>Object entity)
        {

            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(<%Response.Write(currentEntity.GenerateAs);%>Object entity)
        {

            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(<%Response.Write(currentEntity.GenerateAs);%>Object entity)
        {

            IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object <%Response.Write(currentEntity.GenerateAs);%> = (IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object)entity;
            return <%Response.Write(currentEntity.GenerateAs);%>.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(<%Response.Write(currentEntity.GenerateAs);%>Object row, object[] parameters)
        {
            ((IMappeable<%Response.Write(currentEntity.GenerateAs);%>Object) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "<%Response.Write(parameters["SpPrefix"]);%>";
        }


        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>Object by execute a SQL Query Text
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>Object GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by execute a SQL Query Text
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>Object by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>Object GetOne(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                    {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        {
            return base.GetOne(new <%Response.Write(currentEntity.GenerateAs);%>Object(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                    {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>));
        }


        // GetBy Objects and Params
            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>Object by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>Object GetOne(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
        return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetOne",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>));
        }   
                        <%}
                    }
                }
            }%>


        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction,<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

    <%}}%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// Get a <%Response.Write(currentEntity.GenerateAs);%>ObjectList by calling a Stored Procedure
        /// </summary>
        public <%Response.Write(currentEntity.GenerateAs);%>ObjectList GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_GetBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

    <%}}%>

        <% if (!currentEntity.GenerateAsReadOnly) { %>
        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        public void Delete(<%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
        }

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        public void Delete(DbTransaction transaction, <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.CLRType + " "+currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete", <%
                separator = "";
                foreach (BaseTreeNode propNode in currentEntity.Children)
                {
                    PropertyNode currentProperty = (PropertyNode)propNode;
                    if (currentProperty.IsPrimaryKey)
                        {
                        Response.Write(separator + currentProperty.GenerateAs);
                        separator = ", ";
                    }
                }
            %>);
        }

            <%isTheSame = true;
            foreach (BaseTreeNode propNode in currentEntity.Children) {
                PropertyNode currentProperty = (PropertyNode)propNode;
                if (currentProperty.IsEntity) { 
                    if (currentEntity.PrimaryKeyFields.Count > currentProperty.RelatedFields.Count) {
                        int count = 0;
                        foreach (RelatedField relField in currentProperty.RelatedFields) {
                            if (relField.Name.ToLower() != currentEntity.PrimaryKeyFields[count].ToLower()) 
                                isTheSame = false; 
                            count++;
                        }   
                        if (isTheSame) { %>                        
        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        public void Delete(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>));
        }   
        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%>
        /// </summary>
        public void Delete(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                string whatType = "";
                                foreach (BaseTreeNode propNode2 in currentEntity.Children) {
                                    PropertyNode currentProperty2 = (PropertyNode)propNode2;
                                    if (currentProperty2.Name == pkField) 
                                        whatType = currentProperty2.CLRType;
                                }
                                Response.Write(separator + whatType + " " + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>)
        {
        base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_Delete",  UniqueIdentifierHelper.ComposeIdentifier(<%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>, <%count = 0;
                        separator = "";
                        foreach (string pkField in currentEntity.PrimaryKeyFields) {
                            if (count >= currentProperty.RelatedFields.Count || pkField.ToLower() != currentProperty.RelatedFields[count].Name.ToLower()) {
                                Response.Write(separator + pkField);
                                separator = ", ";
                            }
                            count++;
                        }%>));
        }   
                        <%}
                    }
                }
            }%>

        <%foreach (BaseTreeNode propNode in currentEntity.Children) {
            PropertyNode currentProperty = (PropertyNode)propNode;
            if (currentProperty.IsEntity) { %>

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(<%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            string propertyType = "";
            foreach (BaseTreeNode propNode2 in currentEntity.Children){
                PropertyNode currentProperty2 = (PropertyNode)propNode2;
                if (currentProperty2.Name == relField.Name) propertyType = currentProperty2.CLRType;
            }
            Response.Write(separator + propertyType + " " + relField.Name);
            separator = ", ";
        }
        %>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%
        separator = "";
        foreach (RelatedField relField in currentProperty.RelatedFields)
        {
            Response.Write(separator + relField.Name);
            separator = ", ";
        }
        %>);
        }

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

        /// <summary>
        /// Delete <%Response.Write(currentEntity.GenerateAs);%> by <%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>
        /// </summary>
        public void DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>(DbTransaction transaction, IUniqueIdentifiable <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_DeleteBy<%Response.Write(currentProperty.GenerateAs.Replace("Entity","").Replace("Aggregation",""));%>", <%Response.Write(DomainTreeHelper.GetGenerateAsForEntity(currentProperty.Parent.Parent, currentProperty.RelatedTableName));%>.Identifier());
        }

        <% } //if (!currentEntity.GenerateAsReadOnly) %>


    <%}}%>


        //Database Queries 
        <%foreach (DatabaseQuery query in currentEntity.Queries) { 
            if (query.GenerateQuery) {

            string returnType = "";
            string methodName = "";

            switch (query.ReturnType)
	        {
		        case DatabaseQueryReturnType.OneRecord:
                    returnType = currentEntity.GenerateAs + "Object";
                    methodName = "GetObjectByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.ManyRecords:
                    returnType = currentEntity.GenerateAs + "ObjectList";
                    methodName = "GetObjectListByAnyStoredProcedure";
                    break;
                case DatabaseQueryReturnType.Scalar:
                    returnType = query.ScalarCLRType;
                    methodName = "DataBaseHelper.ExecuteScalarByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataReader:
                    returnType = "DbDataReader";
                    methodName = "DataBaseHelper.ExecuteReaderByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.DataTable:
                    returnType = "DataTable";
                    methodName = "DataBaseHelper.FillDataSetByStoredProcedure";
                    break;
                case DatabaseQueryReturnType.NoQuery:
                    returnType = "System.Int32";
                    methodName = "DataBaseHelper.ExecuteNoQueryByStoredProcedure";
                    break;
            }

        %>
            

        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(<%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, false));%>) {
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            return (<%Response.Write(returnType);%>) base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else { 
            if (query.ReturnType == DatabaseQueryReturnType.DataReader) {%>
            return base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>            
            DataSet ds = new DataSet();
            string[] tbl  = {"table"};
            base.DataBaseHelper.FillDataSetByStoredProcedure(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            return ds.Tables[0];
            <% } else { %>
            return base.<%Response.Write(methodName);%>(StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% }}} %>
        }

        
        /// <summary>
        /// 
        /// </summary>
        public <%Response.Write(returnType);%> <%Response.Write(query.QueryName);%>(DbTransaction transaction <%Response.Write(PARAMETERS_FOR_DATABASEQUERY(query, true));%>) {
            <%if (query.ReturnType == DatabaseQueryReturnType.Scalar) { %>
            return (<%Response.Write(returnType);%>) base.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% } else {
            if (query.ReturnType == DatabaseQueryReturnType.DataTable) {%>
            DataSet ds = new DataSet();
            string[] tbl = {"table"};
            base.DataBaseHelper.FillDataSetByStoredProcedure(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>", ds, tbl <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            return ds.Tables[0];
            <% } else { %>
            return base.<%Response.Write(methodName);%>(transaction, StoredProceduresPrefix() + "<%Response.Write(currentEntity.Name);%>_<%Response.Write(query.QueryName);%>" <%Response.Write(PARAMETERS_VALUES_FOR_DATABASEQUERY(query));%>);
            <% }} %>
        }


        <%
        }
        }    
        %>



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}







<%
Response.SaveBuffer("\\Gateways\\Auto\\" + currentEntity.FullGenerateAs + "Gateway.Auto.cs");
}
}
%>
